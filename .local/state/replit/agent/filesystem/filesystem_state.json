{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a React-based calculator application for computing hourly factors based on square footage input. The application features both single-value calculations and range-based data generation with interactive visualizations. It's built as a full-stack TypeScript application with a React frontend and Express backend, designed to calculate hourly factors using the formula: HF = 0.21767 + 11.21274 × (sq-feet)^-0.53816.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **UI Library**: Shadcn/ui components built on Radix UI primitives for consistent, accessible design\n- **Styling**: Tailwind CSS with custom CSS variables for theming\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: React Query (@tanstack/react-query) for server state management and local React state for UI interactions\n- **Form Handling**: React Hook Form with Zod validation schemas\n\n## Backend Architecture\n- **Framework**: Express.js with TypeScript\n- **Database ORM**: Drizzle ORM configured for PostgreSQL\n- **Data Storage**: In-memory storage implementation (MemStorage) as the current storage layer with interface design for easy database integration\n- **API Design**: RESTful API structure with /api prefix for all endpoints\n- **Session Management**: Configured for connect-pg-simple sessions (currently unused but ready for authentication features)\n\n## Component Structure\n- **Calculator Components**: Modular components for equation display, control panels, interactive graphs, and data tables\n- **UI Components**: Comprehensive set of reusable UI components from Shadcn/ui including forms, buttons, dialogs, and data display components\n- **Page Structure**: Simple page-based routing with calculator as the main page and 404 handling\n\n## Data Flow\n- **Calculation Logic**: Centralized in `/lib/calculations.ts` with functions for single calculations, range generation, and chart data creation\n- **Real-time Updates**: React state drives immediate UI updates for calculations and graph interactions\n- **Data Export**: CSV export functionality for generated data tables\n\n## Database Schema\n- **Users Table**: Basic user schema with id, username, and password fields using Drizzle ORM\n- **Type Safety**: Full TypeScript integration with Drizzle for compile-time type checking\n\n# External Dependencies\n\n## Database\n- **PostgreSQL**: Primary database (configured via DATABASE_URL environment variable)\n- **Neon Database**: Serverless PostgreSQL driver (@neondatabase/serverless)\n\n## UI and Visualization\n- **Radix UI**: Comprehensive set of accessible UI primitives\n- **Lucide React**: Icon library for consistent iconography\n- **Chart.js**: Dynamic loading for interactive graph visualizations\n- **Embla Carousel**: Carousel functionality for potential future features\n\n## Development Tools\n- **Vite**: Fast build tool with HMR and development server\n- **ESBuild**: Production bundling for server-side code\n- **Drizzle Kit**: Database migration and schema management\n- **TSX**: TypeScript execution for development server\n\n## Authentication Ready\n- **Connect PG Simple**: PostgreSQL session store (configured but not actively used)\n- **React Hook Form**: Form validation and submission handling\n- **Zod**: Runtime type validation for forms and API data\n\n## Styling and Theming\n- **Tailwind CSS**: Utility-first CSS framework\n- **Class Variance Authority**: Component variant management\n- **Custom CSS Variables**: Theming system with light/dark mode support","size_bytes":3631},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        // Custom calculator colors\n        'scientific-blue': 'var(--scientific-blue)',\n        'calculation-green': 'var(--calculation-green)',\n        'dark-slate': 'var(--dark-slate)',\n        'accent-purple': 'var(--accent-purple)',\n        'light-border': 'var(--light-border)',\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        inter: [\"Inter\", \"sans-serif\"],\n        source: [\"Source Sans Pro\", \"sans-serif\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3142},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { budgetInputSchema, feeMatrixInputSchema, feeMatrixV2InputSchema } from \"@shared/schema\";\nimport { calculateMinimumBudget } from \"@shared/budget-calculations\";\nimport { calculateFeeMatrix } from \"@shared/fee-matrix-calculations\";\nimport { computeFeeMatrixV2 } from \"./services/feeMatrixV2\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Budget Calculator API Routes\n  \n  // Get all building types\n  app.get(\"/api/building-types\", async (req, res) => {\n    try {\n      const buildingTypes = await storage.getAllBuildingTypes();\n      res.json(buildingTypes);\n    } catch (error) {\n      console.error(\"Error fetching building types:\", error);\n      res.status(500).json({ error: \"Failed to fetch building types\" });\n    }\n  });\n\n  // Get tiers for a specific building type\n  app.get(\"/api/building-types/:type/tiers\", async (req, res) => {\n    try {\n      const buildingType = decodeURIComponent(req.params.type);\n      const tiers = await storage.getTiersByBuildingType(buildingType);\n      res.json({ building_type: buildingType, tiers });\n    } catch (error) {\n      console.error(\"Error fetching tiers:\", error);\n      res.status(500).json({ error: \"Failed to fetch tiers\" });\n    }\n  });\n\n  // Calculate minimum budget\n  app.post(\"/api/calc/minimum-budget\", async (req, res) => {\n    try {\n      // Validate input\n      const validationResult = budgetInputSchema.safeParse(req.body);\n      if (!validationResult.success) {\n        return res.status(400).json({ \n          error: \"Invalid input\", \n          details: validationResult.error.issues \n        });\n      }\n\n      const input = validationResult.data;\n\n      // Get cost range data\n      const costRange = await storage.getBuildingCostRange(input.building_type, input.tier);\n      if (!costRange) {\n        return res.status(404).json({ \n          error: `No cost data found for building type \"${input.building_type}\" tier ${input.tier}` \n        });\n      }\n\n      // Get engineering costs\n      const engineeringCosts = await storage.getEngineeringCosts(input.building_type, input.tier);\n\n      // Calculate budget\n      const result = calculateMinimumBudget(input, costRange, engineeringCosts);\n\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error calculating minimum budget:\", error);\n      res.status(500).json({ error: \"Failed to calculate budget\" });\n    }\n  });\n\n  // Calculate fee matrix\n  app.post(\"/api/calc/fee-matrix\", async (req, res) => {\n    try {\n      // Validate input\n      const validationResult = feeMatrixInputSchema.safeParse(req.body);\n      if (!validationResult.success) {\n        return res.status(400).json({ \n          error: \"Invalid input\", \n          details: validationResult.error.issues \n        });\n      }\n\n      const input = validationResult.data;\n\n      // Calculate fee matrix\n      const result = calculateFeeMatrix(input);\n\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error calculating fee matrix:\", error);\n      res.status(500).json({ error: \"Failed to calculate fee matrix\" });\n    }\n  });\n\n  // Fee Matrix V2 (Bottom-Up) API Routes\n  \n  // Get all hours leverage data\n  app.get(\"/api/datasets/hours-leverage\", async (req, res) => {\n    try {\n      const hoursLeverage = await storage.getAllHoursLeverage();\n      res.json(hoursLeverage);\n    } catch (error) {\n      console.error(\"Error fetching hours leverage data:\", error);\n      res.status(500).json({ error: \"Failed to fetch hours leverage data\" });\n    }\n  });\n\n  // Calculate fee matrix v2 (bottom-up)\n  app.post(\"/api/calc/fee-matrix/v2\", async (req, res) => {\n    try {\n      // Validate input\n      const validationResult = feeMatrixV2InputSchema.safeParse(req.body);\n      if (!validationResult.success) {\n        return res.status(400).json({ \n          error: \"Invalid input\", \n          details: validationResult.error.issues \n        });\n      }\n\n      const input = validationResult.data;\n\n      // Calculate fee matrix v2\n      const result = await computeFeeMatrixV2(input);\n\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error calculating fee matrix v2:\", error);\n      res.status(500).json({ error: \"Failed to calculate fee matrix v2\" });\n    }\n  });\n\n  // Get fee calculation defaults\n  app.get(\"/api/fee-defaults\", async (req, res) => {\n    try {\n      const [laborOverhead, hourlyRates, feeConfig] = await Promise.all([\n        storage.getAllLaborOverhead(),\n        storage.getAllHourlyRates(),\n        storage.getAllFeeConfig(),\n      ]);\n\n      const configMap = Object.fromEntries(\n        feeConfig.map(item => [item.settingKey, parseFloat(item.settingValue)])\n      );\n\n      res.json({\n        laborOverhead,\n        hourlyRates,\n        config: configMap,\n      });\n    } catch (error) {\n      console.error(\"Error fetching fee defaults:\", error);\n      res.status(500).json({ error: \"Failed to fetch fee defaults\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":5118},"server/storage.ts":{"content":"import { \n  users, \n  type User, \n  type InsertUser,\n  buildingCostRangesView,\n  engineeringCostsView,\n  buildingTypesView,\n  type BuildingCostRange,\n  type EngineeringCost,\n  type BuildingTypeView,\n  hoursLeverage,\n  type HoursLeverage,\n  type InsertHoursLeverage,\n  laborOverhead,\n  type LaborOverhead,\n  type InsertLaborOverhead,\n  hourlyRates,\n  type HourlyRates,\n  type InsertHourlyRates,\n  feeConfig,\n  type FeeConfig,\n  type InsertFeeConfig\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and } from \"drizzle-orm\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Budget Calculator methods\n  getAllBuildingTypes(): Promise<string[]>;\n  getTiersByBuildingType(buildingType: string): Promise<number[]>;\n  getBuildingCostRange(buildingType: string, tier: number): Promise<BuildingCostRange | undefined>;\n  getEngineeringCosts(buildingType: string, tier: number): Promise<EngineeringCost[]>;\n  \n  // Hours Leverage methods\n  getAllHoursLeverage(): Promise<HoursLeverage[]>;\n  createHoursLeverage(data: InsertHoursLeverage): Promise<HoursLeverage>;\n  updateHoursLeverage(id: string, data: Partial<InsertHoursLeverage>): Promise<HoursLeverage | undefined>;\n  deleteHoursLeverage(id: string): Promise<boolean>;\n  getHoursLeverageByPhase(phase: string): Promise<HoursLeverage | undefined>;\n  \n  // Labor Overhead methods\n  getAllLaborOverhead(): Promise<LaborOverhead[]>;\n  createLaborOverhead(data: InsertLaborOverhead): Promise<LaborOverhead>;\n  updateLaborOverhead(role: string, data: Partial<InsertLaborOverhead>): Promise<LaborOverhead | undefined>;\n  \n  // Hourly Rates methods\n  getAllHourlyRates(): Promise<HourlyRates[]>;\n  createHourlyRates(data: InsertHourlyRates): Promise<HourlyRates>;\n  updateHourlyRates(role: string, data: Partial<InsertHourlyRates>): Promise<HourlyRates | undefined>;\n  \n  // Fee Config methods\n  getAllFeeConfig(): Promise<FeeConfig[]>;\n  getFeeConfigValue(key: string): Promise<number | undefined>;\n  updateFeeConfig(key: string, value: number): Promise<FeeConfig | undefined>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  // Budget Calculator methods\n  async getAllBuildingTypes(): Promise<string[]> {\n    const results = await db\n      .selectDistinct({ buildingType: buildingCostRangesView.buildingType })\n      .from(buildingCostRangesView);\n    return results.map(r => r.buildingType);\n  }\n\n  async getTiersByBuildingType(buildingType: string): Promise<number[]> {\n    const results = await db\n      .selectDistinct({ tier: buildingCostRangesView.tier })\n      .from(buildingCostRangesView)\n      .where(eq(buildingCostRangesView.buildingType, buildingType));\n    return results.map(r => r.tier).sort();\n  }\n\n  async getBuildingCostRange(buildingType: string, tier: number): Promise<BuildingCostRange | undefined> {\n    const [result] = await db\n      .select()\n      .from(buildingCostRangesView)\n      .where(\n        and(\n          eq(buildingCostRangesView.buildingType, buildingType),\n          eq(buildingCostRangesView.tier, tier)\n        )\n      );\n    return result || undefined;\n  }\n\n  async getEngineeringCosts(buildingType: string, tier: number): Promise<EngineeringCost[]> {\n    const results = await db\n      .select()\n      .from(engineeringCostsView)\n      .where(\n        and(\n          eq(engineeringCostsView.buildingType, buildingType),\n          eq(engineeringCostsView.tier, tier)\n        )\n      );\n    return results;\n  }\n\n  // Hours Leverage methods\n  async getAllHoursLeverage(): Promise<HoursLeverage[]> {\n    const results = await db.select().from(hoursLeverage);\n    return results;\n  }\n\n  async createHoursLeverage(data: InsertHoursLeverage): Promise<HoursLeverage> {\n    const [result] = await db.insert(hoursLeverage).values(data).returning();\n    return result;\n  }\n\n  async updateHoursLeverage(id: string, data: Partial<InsertHoursLeverage>): Promise<HoursLeverage | undefined> {\n    const [result] = await db\n      .update(hoursLeverage)\n      .set(data)\n      .where(eq(hoursLeverage.id, id))\n      .returning();\n    return result || undefined;\n  }\n\n  async deleteHoursLeverage(id: string): Promise<boolean> {\n    const result = await db.delete(hoursLeverage).where(eq(hoursLeverage.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  async getHoursLeverageByPhase(phase: string): Promise<HoursLeverage | undefined> {\n    const [result] = await db\n      .select()\n      .from(hoursLeverage)\n      .where(eq(hoursLeverage.phase, phase));\n    return result || undefined;\n  }\n\n  // Labor Overhead methods\n  async getAllLaborOverhead(): Promise<LaborOverhead[]> {\n    const results = await db.select().from(laborOverhead);\n    return results;\n  }\n\n  async createLaborOverhead(data: InsertLaborOverhead): Promise<LaborOverhead> {\n    const [result] = await db.insert(laborOverhead).values(data).returning();\n    return result;\n  }\n\n  async updateLaborOverhead(role: string, data: Partial<InsertLaborOverhead>): Promise<LaborOverhead | undefined> {\n    const [result] = await db\n      .update(laborOverhead)\n      .set(data)\n      .where(eq(laborOverhead.role, role))\n      .returning();\n    return result || undefined;\n  }\n\n  // Hourly Rates methods\n  async getAllHourlyRates(): Promise<HourlyRates[]> {\n    const results = await db.select().from(hourlyRates);\n    return results;\n  }\n\n  async createHourlyRates(data: InsertHourlyRates): Promise<HourlyRates> {\n    const [result] = await db.insert(hourlyRates).values(data).returning();\n    return result;\n  }\n\n  async updateHourlyRates(role: string, data: Partial<InsertHourlyRates>): Promise<HourlyRates | undefined> {\n    const [result] = await db\n      .update(hourlyRates)\n      .set(data)\n      .where(eq(hourlyRates.role, role))\n      .returning();\n    return result || undefined;\n  }\n\n  // Fee Config methods\n  async getAllFeeConfig(): Promise<FeeConfig[]> {\n    const results = await db.select().from(feeConfig);\n    return results;\n  }\n\n  async getFeeConfigValue(key: string): Promise<number | undefined> {\n    const [result] = await db\n      .select()\n      .from(feeConfig)\n      .where(eq(feeConfig.settingKey, key));\n    return result ? parseFloat(result.settingValue) : undefined;\n  }\n\n  async updateFeeConfig(key: string, value: number): Promise<FeeConfig | undefined> {\n    const [result] = await db\n      .update(feeConfig)\n      .set({ settingValue: value.toString() })\n      .where(eq(feeConfig.settingKey, key))\n      .returning();\n    return result || undefined;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":7244},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, pgView, text, varchar, integer, decimal } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\nexport const buildingCost2025Parcial = pgTable(\"Building-Cost-2025-Parcial\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  buildingType: text(\"building_type\").notNull(),\n  tier: integer(\"tier\").notNull(),\n  shellMin: integer(\"shell_min\").notNull(),\n  shellMax: integer(\"shell_max\").notNull(),\n  allInMin: integer(\"all_in_min\").notNull(),\n  allInMax: integer(\"all_in_max\").notNull(),\n  archShare: decimal(\"arch_share\", { precision: 5, scale: 2 }).notNull(),\n  intShare: decimal(\"int_share\", { precision: 5, scale: 2 }).notNull(),\n  landShare: decimal(\"land_share\", { precision: 5, scale: 2 }).notNull(),\n});\n\nexport const insertBuildingCostSchema = createInsertSchema(buildingCost2025Parcial).omit({\n  id: true,\n});\n\nexport type InsertBuildingCost = z.infer<typeof insertBuildingCostSchema>;\nexport type BuildingCost = typeof buildingCost2025Parcial.$inferSelect;\n\nexport const engineeringCosts = pgTable(\"Engineering_Costs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  key: text(\"key\").notNull(),\n  buildingType: text(\"building_type\").notNull(),\n  numericTier: integer(\"numeric_tier\").notNull(),\n  categorySimple: text(\"category_simple\").notNull(),\n  percentAvg: text(\"percent_avg\").notNull(),\n  percentMin: integer(\"percent_min\").notNull(),\n  percentMax: integer(\"percent_max\").notNull(),\n  costMinPSF: decimal(\"cost_min_psf\", { precision: 8, scale: 2 }).notNull(),\n  costMaxPSF: decimal(\"cost_max_psf\", { precision: 8, scale: 2 }).notNull(),\n});\n\nexport const insertEngineeringCostsSchema = createInsertSchema(engineeringCosts).omit({\n  id: true,\n});\n\nexport type InsertEngineeringCosts = z.infer<typeof insertEngineeringCostsSchema>;\nexport type EngineeringCosts = typeof engineeringCosts.$inferSelect;\n\nexport const buildingTypes = pgTable(\"Building_Types\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  buildingUse: text(\"building_use\").notNull(),\n  buildingType: text(\"building_type\").notNull(),\n  feeCategory: text(\"fee_category\").notNull(),\n  costCategory: text(\"cost_category\").notNull(),\n});\n\nexport const insertBuildingTypesSchema = createInsertSchema(buildingTypes).omit({\n  id: true,\n});\n\nexport type InsertBuildingTypes = z.infer<typeof insertBuildingTypesSchema>;\nexport type BuildingTypes = typeof buildingTypes.$inferSelect;\n\n// Database Views for Budget Calculator\nexport const buildingCostRangesView = pgTable(\"building_cost_ranges\", {\n  buildingType: text(\"building_type\").notNull(),\n  tier: integer(\"tier\").notNull(),\n  allInMin: integer(\"all_in_min\").notNull(),\n  allInMax: integer(\"all_in_max\").notNull(),\n  archShare: decimal(\"arch_share\").notNull(),\n  intShare: decimal(\"int_share\").notNull(),\n  landShare: decimal(\"land_share\").notNull(),\n});\n\nexport const engineeringCostsView = pgTable(\"engineering_costs_v\", {\n  buildingType: text(\"building_type\").notNull(),\n  tier: integer(\"tier\").notNull(),\n  category: text(\"category\").notNull(),\n  percentAvg: text(\"percent_avg\").notNull(),\n  percentMin: decimal(\"percent_min\").notNull(),\n  percentMax: decimal(\"percent_max\").notNull(),\n  costMinPsf: decimal(\"cost_min_psf\").notNull(),\n  costMaxPsf: decimal(\"cost_max_psf\").notNull(),\n});\n\nexport const buildingTypesView = pgView(\"building_types_v\").as((qb) => {\n  return qb.select({\n    buildingType: buildingTypes.buildingType,\n    buildingUse: buildingTypes.buildingUse,\n    feeCategory: buildingTypes.feeCategory,\n    costCategory: buildingTypes.costCategory,\n  }).from(buildingTypes);\n});\n\n// Budget Calculator Types\nexport const budgetInputSchema = z.object({\n  building_type: z.string(),\n  tier: z.number().int().min(1).max(3),\n  new_area_ft2: z.number().positive(),\n  existing_area_ft2: z.number().min(0),\n  site_area_m2: z.number().min(0).default(0),\n});\n\nexport type BudgetInput = z.infer<typeof budgetInputSchema>;\n\nexport type BudgetCalculationResult = {\n  inputs: BudgetInput;\n  all_in: { min_psf: number; max_psf: number };\n  area: { total_sf: number };\n  total_cost: { low: number; high: number; proposed: number };\n  shares: { shell: number; interior: number; landscape: number };\n  minimum_budgets: { shell: number; interior: number; landscape: number };\n  design_shares: Record<string, number>;\n  engineering_budgets: Record<string, number> & { sum: number };\n  architecture_budget: number;\n  working_budget: number;\n  // New construction vs existing breakdown\n  construction_ratios: { new_construction: number; existing_remodel: number };\n  // Detailed breakdown for each discipline\n  discipline_breakdown: {\n    architecture: { total: number; new_construction: number; existing_remodel: number };\n    interior: { total: number; new_construction: number; existing_remodel: number };\n    landscape: { total: number; new_construction: number; existing_remodel: number };\n    [discipline: string]: { total: number; new_construction: number; existing_remodel: number };\n  };\n  notes: string[];\n};\n\nexport const hoursLeverage = pgTable(\"hours_leverage\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  phase: text(\"phase\").notNull(),\n  hoursPct: decimal(\"hours_pct\", { precision: 5, scale: 4 }),\n  adminPct: decimal(\"admin_pct\", { precision: 5, scale: 4 }).default(\"0\").notNull(),\n  designer1Pct: decimal(\"designer1_pct\", { precision: 5, scale: 4 }).default(\"0\").notNull(),\n  designer2Pct: decimal(\"designer2_pct\", { precision: 5, scale: 4 }).default(\"0\").notNull(),\n  architectPct: decimal(\"architect_pct\", { precision: 5, scale: 4 }).default(\"0\").notNull(),\n  engineerPct: decimal(\"engineer_pct\", { precision: 5, scale: 4 }).default(\"0\").notNull(),\n  principalPct: decimal(\"principal_pct\", { precision: 5, scale: 4 }).default(\"0\").notNull(),\n  totalPercent: decimal(\"total_percent\", { precision: 5, scale: 4 }).default(\"1\"),\n});\n\nexport const laborOverhead = pgTable(\"labor_overhead\", {\n  role: text(\"role\").primaryKey(),\n  laborAnnual: decimal(\"labor_annual\", { precision: 10, scale: 2 }).notNull(),\n  overheadAnnual: decimal(\"overhead_annual\", { precision: 10, scale: 2 }).notNull(),\n});\n\nexport const hourlyRates = pgTable(\"hourly_rates\", {\n  role: text(\"role\").primaryKey(),\n  louisAmyRate: decimal(\"louis_amy_rate\", { precision: 8, scale: 2 }),\n  marketRate: decimal(\"market_rate\", { precision: 8, scale: 2 }),\n});\n\nexport const feeConfig = pgTable(\"fee_config\", {\n  settingKey: text(\"setting_key\").primaryKey(),\n  settingValue: decimal(\"setting_value\", { precision: 8, scale: 4 }).notNull(),\n});\n\nexport const forecast2026 = pgTable(\"forecast_2026\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  category: text(\"category\").notNull(),\n  assumption: text(\"assumption\"),\n  designer1Amount: decimal(\"designer1_amount\", { precision: 10, scale: 2 }),\n  designer2Amount: decimal(\"designer2_amount\", { precision: 10, scale: 2 }),\n  architect1Amount: decimal(\"architect1_amount\", { precision: 10, scale: 2 }),\n  architect2Amount: decimal(\"architect2_amount\", { precision: 10, scale: 2 }),\n  principalAmount: decimal(\"principal_amount\", { precision: 10, scale: 2 }),\n  totalAmount: decimal(\"total_amount\", { precision: 10, scale: 2 }),\n});\n\nexport const ratePricing = pgTable(\"rate_pricing\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  costCategory: text(\"cost_category\").notNull(),\n  designer1Rate: decimal(\"designer1_rate\", { precision: 12, scale: 8 }),\n  designer2Rate: decimal(\"designer2_rate\", { precision: 12, scale: 8 }),\n  architectRate: decimal(\"architect_rate\", { precision: 12, scale: 8 }),\n  engineerRate: decimal(\"engineer_rate\", { precision: 12, scale: 8 }),\n  principalRate: decimal(\"principal_rate\", { precision: 12, scale: 8 }),\n  averageRate: decimal(\"average_rate\", { precision: 12, scale: 8 }),\n});\n\nexport const insertHoursLeverageSchema = createInsertSchema(hoursLeverage).omit({\n  id: true,\n});\nexport const insertLaborOverheadSchema = createInsertSchema(laborOverhead);\nexport const insertHourlyRatesSchema = createInsertSchema(hourlyRates);\nexport const insertFeeConfigSchema = createInsertSchema(feeConfig);\nexport const insertForecast2026Schema = createInsertSchema(forecast2026).omit({\n  id: true,\n});\nexport const insertRatePricingSchema = createInsertSchema(ratePricing).omit({\n  id: true,\n});\n\nexport type InsertHoursLeverage = z.infer<typeof insertHoursLeverageSchema>;\nexport type HoursLeverage = typeof hoursLeverage.$inferSelect;\nexport type InsertLaborOverhead = z.infer<typeof insertLaborOverheadSchema>;\nexport type LaborOverhead = typeof laborOverhead.$inferSelect;\nexport type InsertHourlyRates = z.infer<typeof insertHourlyRatesSchema>;\nexport type HourlyRates = typeof hourlyRates.$inferSelect;\nexport type InsertFeeConfig = z.infer<typeof insertFeeConfigSchema>;\nexport type FeeConfig = typeof feeConfig.$inferSelect;\nexport type InsertForecast2026 = z.infer<typeof insertForecast2026Schema>;\nexport type Forecast2026 = typeof forecast2026.$inferSelect;\nexport type InsertRatePricing = z.infer<typeof insertRatePricingSchema>;\nexport type RatePricing = typeof ratePricing.$inferSelect;\n\nexport type BuildingCostRange = typeof buildingCostRangesView.$inferSelect;\nexport type EngineeringCost = typeof engineeringCostsView.$inferSelect;\nexport type BuildingTypeView = typeof buildingTypesView.$inferSelect;\n\n// Fee Matrix Types\nexport const feeMatrixInputSchema = z.object({\n  budget_result: z.any(), // BudgetCalculationResult\n  complexity_multiplier: z.number().min(0).max(2).default(0.3),\n  discount_rate: z.number().min(0).max(1).default(0.15),\n  average_billable_rate: z.number().positive().default(172.17),\n});\n\nexport type FeeMatrixInput = z.infer<typeof feeMatrixInputSchema>;\n\nexport type DisciplineFee = {\n  discipline: string;\n  budget: number;\n  percentage: number;\n  fee: number;\n  discounted_fee?: number;\n  consultant_fee?: number;\n  rate_psf: number;\n  hours?: number;\n  is_internal: boolean;\n};\n\nexport type ScanningFee = {\n  service: string;\n  area: number;\n  rate: number;\n  fee: number;\n  discounted_fee: number;\n  hours?: number;\n};\n\nexport type FeeMatrixResult = {\n  inputs: FeeMatrixInput;\n  scanning_fees: ScanningFee[];\n  discipline_fees: DisciplineFee[];\n  totals: {\n    market_fee: number;\n    consultant_total: number;\n    discounted_total: number;\n    overall_percentage: number;\n    rate_per_ft2: number;\n    total_hours: number;\n  };\n  hourly_factor: {\n    hf_value: number;\n    raw_design_hours: number;\n    total_building_area: number;\n  };\n  cost_base: {\n    shell_cost_base: number;\n    interior_cost_base: number;\n    landscape_cost_base: number;\n  };\n};\n\n// Fee Matrix V2 Types (Bottom-Up)\nexport const feeMatrixV2InputSchema = z.object({\n  totalAreaFt2: z.number().positive(),\n  hoursFactor: z.number().positive().default(0.220),\n  totalHours: z.number().int().positive().optional(),\n  complexityMultiplier: z.number().min(0).max(2).default(0.3),\n  scenarioDiscountLouisAmy: z.number().min(0).max(1).default(0.35),\n  scenarioDiscountMarket: z.number().min(0).max(1).default(0.35),\n});\n\nexport type FeeMatrixV2Input = z.infer<typeof feeMatrixV2InputSchema>;\n\nexport type SectionII = {\n  roles: Record<string, {\n    laborPerHour: number;\n    overheadPerHour: number;\n    costPerHour: number;\n    pricePerHour: number;\n  }>;\n  simpleAverageRate: number;\n  weightedAverageRate: number;\n};\n\nexport type SectionIII = {\n  totalAreaFt2: number;\n  hoursFactor: number;\n  totalHoursPlanned: number;\n  phases: Array<{\n    name: string;\n    months: number | null;\n    percent: number | null;\n    hours: number;\n  }>;\n  totalMonths: number;\n};\n\nexport type SectionIV = {\n  matrix: Record<string, Record<string, number>>;\n  roleTotalsRounded: Record<string, number>;\n  roundedGrandTotal: number;\n  plannedGrandTotal: number;\n};\n\nexport type SectionV = {\n  byRole: Record<string, {\n    hours: number;\n    pricePerHour: number;\n    pricing: number;\n    labor: number;\n    overhead: number;\n    totalCost: number;\n    profit: number;\n    margin: number;\n  }>;\n  totals: {\n    hours: number;\n    pricing: number;\n    labor: number;\n    overhead: number;\n    totalCost: number;\n    profit: number;\n    margin: number;\n  };\n};\n\nexport type SectionVI = {\n  scenarios: Array<{\n    name: string;\n    byRole: Record<string, number>;\n    total: number;\n    pctOfProjectBudget: number;\n  }>;\n};\n\nexport type FeeMatrixV2Result = {\n  inputs: FeeMatrixV2Input;\n  sectionII: SectionII;\n  sectionIII: SectionIII;\n  sectionIV: SectionIV;\n  sectionV: SectionV;\n  sectionVI: SectionVI;\n};\n","size_bytes":13020},"client/src/App.tsx":{"content":"import { Switch, Route, Link, useLocation } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { Button } from \"@/components/ui/button\";\nimport Calculator from \"@/pages/calculator\";\nimport MinimumBudgetCalculator from \"@/pages/minimum-budget\";\nimport FeeMatrix from \"@/pages/fee-matrix\";\nimport FeeMatrixBottomUp from \"@/pages/fee-matrix-bottom-up\";\nimport ProjectDashboard from \"@/pages/project-dashboard\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction NavBar() {\n  const [location] = useLocation();\n  \n  return (\n    <div className=\"bg-white border-b border-gray-200 shadow-sm\">\n      <div className=\"max-w-7xl mx-auto px-3 sm:px-6 lg:px-8\">\n        <div className=\"flex flex-col sm:flex-row sm:justify-between h-auto sm:h-16 py-3 sm:py-0\">\n          <div className=\"flex items-center justify-center sm:justify-start mb-3 sm:mb-0\">\n            <div className=\"flex items-center\">\n              <div className=\"w-8 h-8 bg-scientific-blue rounded-md flex items-center justify-center mr-3\">\n                <span className=\"text-white font-bold text-sm\">PC</span>\n              </div>\n              <span className=\"text-lg sm:text-xl font-semibold text-gray-900\">Project Calculator</span>\n            </div>\n          </div>\n          <nav className=\"flex flex-col sm:flex-row gap-2 sm:gap-4 sm:items-center\">\n            <Link href=\"/\">\n              <Button \n                variant={(location === \"/\" || location === \"/dashboard\") ? \"default\" : \"ghost\"}\n                className=\"text-xs sm:text-sm w-full sm:w-auto px-2 sm:px-4 py-2\"\n              >\n                <span className=\"hidden lg:inline\">Project Dashboard</span>\n                <span className=\"lg:hidden\">Dashboard</span>\n              </Button>\n            </Link>\n            <Link href=\"/minimum-budget\">\n              <Button \n                variant={location === \"/minimum-budget\" ? \"default\" : \"ghost\"}\n                className=\"text-xs sm:text-sm w-full sm:w-auto px-2 sm:px-4 py-2\"\n              >\n                <span className=\"hidden lg:inline\">Budget Calculator</span>\n                <span className=\"lg:hidden\">Budget</span>\n              </Button>\n            </Link>\n            <Link href=\"/fee-matrix\">\n              <Button \n                variant={location === \"/fee-matrix\" ? \"default\" : \"ghost\"}\n                className=\"text-xs sm:text-sm w-full sm:w-auto px-2 sm:px-4 py-2\"\n              >\n                <span className=\"hidden lg:inline\">Fee Calculator</span>\n                <span className=\"lg:hidden\">Fees</span>\n              </Button>\n            </Link>\n            <Link href=\"/fee-matrix-bottom-up\">\n              <Button \n                variant={location === \"/fee-matrix-bottom-up\" ? \"default\" : \"ghost\"}\n                className=\"text-xs sm:text-sm w-full sm:w-auto px-2 sm:px-4 py-2\"\n              >\n                <span className=\"hidden lg:inline\">Fee Matrix v2</span>\n                <span className=\"lg:hidden\">Fees v2</span>\n              </Button>\n            </Link>\n            <Link href=\"/hourly-factor\">\n              <Button \n                variant={location === \"/hourly-factor\" ? \"default\" : \"ghost\"}\n                className=\"text-xs sm:text-sm w-full sm:w-auto px-2 sm:px-4 py-2\"\n              >\n                <span className=\"hidden lg:inline\">Hourly Factor</span>\n                <span className=\"lg:hidden\">HF Calc</span>\n              </Button>\n            </Link>\n          </nav>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction Router() {\n  return (\n    <div>\n      <NavBar />\n      <Switch>\n        <Route path=\"/\" component={ProjectDashboard} />\n        <Route path=\"/dashboard\" component={ProjectDashboard} />\n        <Route path=\"/hourly-factor\" component={Calculator} />\n        <Route path=\"/minimum-budget\" component={MinimumBudgetCalculator} />\n        <Route path=\"/fee-matrix\" component={FeeMatrix} />\n        <Route path=\"/fee-matrix-bottom-up\" component={FeeMatrixBottomUp} />\n        <Route component={NotFound} />\n      </Switch>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":4430},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(248, 39%, 98%);\n  --foreground: hsl(30, 26%, 11%);\n  --card: hsl(180, 7%, 97%);\n  --card-foreground: hsl(30, 26%, 11%);\n  --popover: hsl(248, 39%, 98%);\n  --popover-foreground: hsl(30, 26%, 11%);\n  --primary: hsl(215, 88%, 53%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(30, 26%, 11%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(240, 2%, 90%);\n  --muted-foreground: hsl(30, 26%, 11%);\n  --accent: hsl(212, 51%, 93%);\n  --accent-foreground: hsl(215, 88%, 53%);\n  --destructive: hsl(356, 91%, 54%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(201, 30%, 91%);\n  --input: hsl(200, 23%, 97%);\n  --ring: hsl(203, 89%, 53%);\n  --chart-1: hsl(215, 88%, 53%);\n  --chart-2: hsl(160, 100%, 36%);\n  --chart-3: hsl(42, 93%, 56%);\n  --chart-4: hsl(147, 79%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(180, 7%, 97%);\n  --sidebar-foreground: hsl(30, 26%, 11%);\n  --sidebar-primary: hsl(215, 88%, 53%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(212, 51%, 93%);\n  --sidebar-accent-foreground: hsl(215, 88%, 53%);\n  --sidebar-border: hsl(205, 25%, 91%);\n  --sidebar-ring: hsl(203, 89%, 53%);\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: JetBrains Mono, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(203, 89%, 53% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(203, 89%, 53% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(203, 89%, 53% / 0.00), 0px 1px 2px -1px hsl(203, 89%, 53% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(203, 89%, 53% / 0.00), 0px 1px 2px -1px hsl(203, 89%, 53% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(203, 89%, 53% / 0.00), 0px 2px 4px -1px hsl(203, 89%, 53% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(203, 89%, 53% / 0.00), 0px 4px 6px -1px hsl(203, 89%, 53% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(203, 89%, 53% / 0.00), 0px 8px 10px -1px hsl(203, 89%, 53% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(203, 89%, 53% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Custom colors for calculator */\n  --scientific-blue: hsl(215, 88%, 53%);\n  --calculation-green: hsl(160, 69%, 44%);\n  --dark-slate: hsl(210, 24%, 16%);\n  --accent-purple: hsl(258, 90%, 66%);\n  --light-border: hsl(214, 32%, 91%);\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 7%, 92%);\n  --card: hsl(228, 10%, 10%);\n  --card-foreground: hsl(0, 0%, 85%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 7%, 92%);\n  --primary: hsl(204, 88%, 53%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(195, 15%, 95%);\n  --secondary-foreground: hsl(30, 26%, 11%);\n  --muted: hsl(0, 0%, 9%);\n  --muted-foreground: hsl(210, 3%, 46%);\n  --accent: hsl(206, 70%, 8%);\n  --accent-foreground: hsl(204, 88%, 53%);\n  --destructive: hsl(356, 91%, 54%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 5%, 15%);\n  --input: hsl(208, 28%, 18%);\n  --ring: hsl(203, 89%, 53%);\n  --chart-1: hsl(215, 88%, 53%);\n  --chart-2: hsl(160, 100%, 36%);\n  --chart-3: hsl(42, 93%, 56%);\n  --chart-4: hsl(147, 79%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(228, 10%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85%);\n  --sidebar-primary: hsl(203, 89%, 53%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(206, 70%, 8%);\n  --sidebar-accent-foreground: hsl(204, 88%, 53%);\n  --sidebar-border: hsl(206, 16%, 26%);\n  --sidebar-ring: hsl(203, 89%, 53%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/* Custom utility classes for calculator colors */\n.text-scientific-blue {\n  color: var(--scientific-blue);\n}\n\n.text-calculation-green {\n  color: var(--calculation-green);\n}\n\n.text-dark-slate {\n  color: var(--dark-slate);\n}\n\n.text-accent-purple {\n  color: var(--accent-purple);\n}\n\n.bg-scientific-blue {\n  background-color: var(--scientific-blue);\n}\n\n.bg-calculation-green {\n  background-color: var(--calculation-green);\n}\n\n.bg-accent-purple {\n  background-color: var(--accent-purple);\n}\n\n.border-light-border {\n  border-color: var(--light-border);\n}\n\n.font-mono {\n  font-family: var(--font-mono);\n}\n\n.font-inter {\n  font-family: var(--font-sans);\n}\n","size_bytes":4325},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/calculations.ts":{"content":"export interface CalculationResult {\n  squareFeet: number;\n  hourlyFactor: number;\n  hourlyFactorAlt?: number;\n  totalHours: number;\n  totalHoursAlt?: number;\n}\n\nexport interface RangeData extends CalculationResult {\n  hoursDifference: number | null;\n  hoursDifferenceAlt?: number | null;\n}\n\nexport type EquationType = 'original' | 'alternative' | 'both';\n\nexport function calculateHourlyFactor(squareFeet: number, equation: 'original' | 'alternative' = 'original'): number {\n  if (squareFeet <= 0) return 0;\n  const baseValue = 0.21767 + 11.21274 * Math.pow(squareFeet, -0.53816);\n  return equation === 'alternative' ? baseValue - 0.08 : baseValue;\n}\n\nexport function calculateBothEquations(squareFeet: number): { original: number; alternative: number } {\n  if (squareFeet <= 0) return { original: 0, alternative: 0 };\n  const baseValue = 0.21767 + 11.21274 * Math.pow(squareFeet, -0.53816);\n  return {\n    original: baseValue,\n    alternative: baseValue - 0.08\n  };\n}\n\nexport function generateRangeData(\n  start: number,\n  end: number,\n  interval: number,\n  equationType: EquationType = 'original'\n): RangeData[] {\n  const results: RangeData[] = [];\n  let previousTotalHours: number | null = null;\n  let previousAltTotalHours: number | null = null;\n\n  for (let sqFt = start; sqFt <= end; sqFt += interval) {\n    const calculations = calculateBothEquations(sqFt);\n    const hf = calculations.original;\n    const hfAlt = calculations.alternative;\n    const totalHours = hf * sqFt;\n    const totalHoursAlt = hfAlt * sqFt;\n    \n    const hoursDifference = previousTotalHours !== null ? totalHours - previousTotalHours : null;\n    const hoursDifferenceAlt = previousAltTotalHours !== null ? totalHoursAlt - previousAltTotalHours : null;\n    \n    const result: RangeData = {\n      squareFeet: sqFt,\n      hourlyFactor: hf,\n      totalHours: totalHours,\n      hoursDifference\n    };\n    \n    if (equationType === 'alternative' || equationType === 'both') {\n      result.hourlyFactorAlt = hfAlt;\n      result.totalHoursAlt = totalHoursAlt;\n      result.hoursDifferenceAlt = hoursDifferenceAlt;\n    }\n    \n    results.push(result);\n    \n    previousTotalHours = totalHours;\n    previousAltTotalHours = totalHoursAlt;\n  }\n\n  return results;\n}\n\nexport function generateChartData(\n  min: number = 100,\n  max: number = 10000,\n  points: number = 100,\n  equationType: EquationType = 'original'\n): { x: number; y: number; yAlt?: number }[] {\n  const data: { x: number; y: number; yAlt?: number }[] = [];\n  const step = (max - min) / points;\n  \n  for (let x = min; x <= max; x += step) {\n    const calculations = calculateBothEquations(x);\n    const point: { x: number; y: number; yAlt?: number } = {\n      x: x,\n      y: calculations.original\n    };\n    \n    if (equationType === 'alternative' || equationType === 'both') {\n      point.yAlt = calculations.alternative;\n    }\n    \n    data.push(point);\n  }\n  \n  return data;\n}\n\nexport function exportToCSV(data: RangeData[], equationType: EquationType = 'original'): string {\n  let headers = ['Square Feet', 'Hourly Factor (Original)', 'Total Hours (Original)', 'Hours Difference (Original)'];\n  \n  if (equationType === 'alternative') {\n    headers = ['Square Feet', 'Hourly Factor (Alternative)', 'Total Hours (Alternative)', 'Hours Difference (Alternative)'];\n  } else if (equationType === 'both') {\n    headers = ['Square Feet', 'Hourly Factor (Original)', 'Total Hours (Original)', 'Hours Difference (Original)', 'Hourly Factor (Alternative)', 'Total Hours (Alternative)', 'Hours Difference (Alternative)'];\n  }\n  \n  const csvContent = [\n    headers.join(','),\n    ...data.map(row => {\n      if (equationType === 'alternative') {\n        return [\n          row.squareFeet.toFixed(0),\n          row.hourlyFactorAlt?.toFixed(5) || '-',\n          row.totalHoursAlt?.toFixed(2) || '-',\n          row.hoursDifferenceAlt?.toFixed(2) || '-'\n        ].join(',');\n      } else if (equationType === 'both') {\n        return [\n          row.squareFeet.toFixed(0),\n          row.hourlyFactor.toFixed(5),\n          row.totalHours.toFixed(2),\n          row.hoursDifference?.toFixed(2) || '-',\n          row.hourlyFactorAlt?.toFixed(5) || '-',\n          row.totalHoursAlt?.toFixed(2) || '-',\n          row.hoursDifferenceAlt?.toFixed(2) || '-'\n        ].join(',');\n      } else {\n        return [\n          row.squareFeet.toFixed(0),\n          row.hourlyFactor.toFixed(5),\n          row.totalHours.toFixed(2),\n          row.hoursDifference?.toFixed(2) || '-'\n        ].join(',');\n      }\n    })\n  ].join('\\n');\n  \n  return csvContent;\n}\n\nexport function downloadCSV(data: RangeData[], equationType: EquationType = 'original', filename: string = 'hourly-factor-data.csv'): void {\n  const csvContent = exportToCSV(data, equationType);\n  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n  const link = document.createElement('a');\n  \n  if (link.download !== undefined) {\n    const url = URL.createObjectURL(blob);\n    link.setAttribute('href', url);\n    link.setAttribute('download', filename);\n    link.style.visibility = 'hidden';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  }\n}\n","size_bytes":5177},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/calculator.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport EquationDisplay from '@/components/calculator/equation-display';\nimport ControlPanel from '@/components/calculator/control-panel';\nimport InteractiveGraph from '@/components/calculator/interactive-graph';\nimport DataTable from '@/components/calculator/data-table';\nimport { generateRangeData, calculateBothEquations, RangeData, EquationType } from '@/lib/calculations';\n\nexport default function Calculator() {\n  // Equation selection state\n  const [selectedEquation, setSelectedEquation] = useState<EquationType>('original');\n  \n  // Single value calculator state\n  const [singleValue, setSingleValue] = useState(1000);\n  \n  // Range calculator state\n  const [rangeStart, setRangeStart] = useState(100);\n  const [rangeEnd, setRangeEnd] = useState(5000);\n  const [rangeInterval, setRangeInterval] = useState(100);\n  \n  // Graph controls state\n  const [graphXMin, setGraphXMin] = useState(100);\n  const [graphXMax, setGraphXMax] = useState(10000);\n  const [showGrid, setShowGrid] = useState(true);\n  \n  // Data table state\n  const [tableData, setTableData] = useState<RangeData[]>([]);\n\n  // Calculate current point for graph\n  const calculations = calculateBothEquations(singleValue);\n  const currentPoint = {\n    x: singleValue,\n    y: calculations.original,\n    yAlt: calculations.alternative\n  };\n\n  const handleGenerateRange = () => {\n    const data = generateRangeData(rangeStart, rangeEnd, rangeInterval, selectedEquation);\n    setTableData(data);\n  };\n\n  const handleResetZoom = () => {\n    setGraphXMin(100);\n    setGraphXMax(10000);\n  };\n\n  const handleExportData = () => {\n    if (tableData.length > 0) {\n      let csvContent = '';\n      if (selectedEquation === 'both') {\n        csvContent = tableData.map(row => \n          `${row.squareFeet},${row.hourlyFactor.toFixed(5)},${row.totalHours.toFixed(2)},${row.hoursDifference?.toFixed(2) || '-'},${row.hourlyFactorAlt?.toFixed(5) || '-'},${row.totalHoursAlt?.toFixed(2) || '-'},${row.hoursDifferenceAlt?.toFixed(2) || '-'}`\n        ).join('\\n');\n        csvContent = `Square Feet,Original HF,Original Hours,Original Hours Diff,Alternative HF,Alternative Hours,Alternative Hours Diff\\n${csvContent}`;\n      } else if (selectedEquation === 'alternative') {\n        csvContent = tableData.map(row => \n          `${row.squareFeet},${row.hourlyFactorAlt?.toFixed(5) || '-'},${row.totalHoursAlt?.toFixed(2) || '-'},${row.hoursDifferenceAlt?.toFixed(2) || '-'}`\n        ).join('\\n');\n        csvContent = `Square Feet,Hourly Factor,Total Hours,Hours Difference\\n${csvContent}`;\n      } else {\n        csvContent = tableData.map(row => \n          `${row.squareFeet},${row.hourlyFactor.toFixed(5)},${row.totalHours.toFixed(2)},${row.hoursDifference?.toFixed(2) || '-'}`\n        ).join('\\n');\n        csvContent = `Square Feet,Hourly Factor,Total Hours,Hours Difference\\n${csvContent}`;\n      }\n      \n      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n      const link = document.createElement('a');\n      const url = URL.createObjectURL(blob);\n      link.setAttribute('href', url);\n      link.setAttribute('download', 'hourly-factor-data.csv');\n      link.style.visibility = 'hidden';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  };\n\n  return (\n    <div className=\"bg-gray-50 font-inter text-dark-slate min-h-screen\">\n      {/* Header */}\n      <header className=\"bg-white border-b border-light-border shadow-sm\">\n        <div className=\"max-w-7xl mx-auto px-3 sm:px-6 lg:px-8\">\n          <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between h-auto sm:h-16 py-3 sm:py-0\">\n            <div className=\"flex items-center space-x-3 mb-3 sm:mb-0\">\n              <div className=\"w-10 h-10 bg-scientific-blue rounded-lg flex items-center justify-center\">\n                <span className=\"text-white font-mono font-semibold text-lg\">HF</span>\n              </div>\n              <div>\n                <h1 className=\"text-lg sm:text-xl font-semibold text-dark-slate\">Hourly Factor Calculator</h1>\n                <p className=\"text-xs sm:text-sm text-gray-500\">Interactive visualization & data analysis</p>\n              </div>\n            </div>\n            <div className=\"flex items-center justify-between sm:justify-end space-x-2 sm:space-x-4\">\n              <Button\n                variant=\"ghost\"\n                onClick={handleExportData}\n                disabled={tableData.length === 0}\n                className=\"px-2 sm:px-4 py-2 text-xs sm:text-sm text-scientific-blue hover:bg-blue-50 rounded-lg font-medium transition-colors duration-200\"\n              >\n                <span className=\"hidden sm:inline\">Export Data</span>\n                <span className=\"sm:hidden\">Export</span>\n              </Button>\n              <button className=\"p-2 text-gray-500 hover:text-dark-slate rounded-lg transition-colors duration-200\">\n                <span className=\"sr-only\">Settings</span>\n                ⚙️\n              </button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <div className=\"max-w-7xl mx-auto px-3 sm:px-6 lg:px-8 py-4 sm:py-8\">\n        <EquationDisplay selectedEquation={selectedEquation} />\n\n        {/* Split Panel Layout */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 sm:gap-8\">\n          <ControlPanel\n            singleValue={singleValue}\n            setSingleValue={setSingleValue}\n            rangeStart={rangeStart}\n            setRangeStart={setRangeStart}\n            rangeEnd={rangeEnd}\n            setRangeEnd={setRangeEnd}\n            rangeInterval={rangeInterval}\n            setRangeInterval={setRangeInterval}\n            onGenerateRange={handleGenerateRange}\n            graphXMin={graphXMin}\n            setGraphXMin={setGraphXMin}\n            graphXMax={graphXMax}\n            setGraphXMax={setGraphXMax}\n            showGrid={showGrid}\n            setShowGrid={setShowGrid}\n            selectedEquation={selectedEquation}\n            setSelectedEquation={setSelectedEquation}\n          />\n\n          {/* Right Panel: Graph and Data Table */}\n          <div className=\"lg:col-span-2 space-y-4 sm:space-y-6\">\n            <InteractiveGraph\n              currentPoint={currentPoint}\n              graphXMin={graphXMin}\n              graphXMax={graphXMax}\n              showGrid={showGrid}\n              onResetZoom={handleResetZoom}\n              selectedEquation={selectedEquation}\n            />\n\n            <DataTable\n              data={tableData}\n              onExportCSV={handleExportData}\n              selectedEquation={selectedEquation}\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Footer */}\n      <footer className=\"bg-white border-t border-light-border mt-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"text-sm text-gray-600\">\n              Hourly Factor Calculator v1.0 - Built with precision and accuracy\n            </div>\n            <div className=\"text-xs text-gray-500 font-mono\">\n              Equation: 0.21767 + 11.21274 × (sq-feet)^(-0.53816)\n            </div>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":7365},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/calculator/control-panel.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Button } from '@/components/ui/button';\nimport { Switch } from '@/components/ui/switch';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { calculateHourlyFactor, calculateBothEquations, EquationType } from '@/lib/calculations';\n\ninterface ControlPanelProps {\n  singleValue: number;\n  setSingleValue: (value: number) => void;\n  rangeStart: number;\n  setRangeStart: (value: number) => void;\n  rangeEnd: number;\n  setRangeEnd: (value: number) => void;\n  rangeInterval: number;\n  setRangeInterval: (value: number) => void;\n  onGenerateRange: () => void;\n  graphXMin: number;\n  setGraphXMin: (value: number) => void;\n  graphXMax: number;\n  setGraphXMax: (value: number) => void;\n  showGrid: boolean;\n  setShowGrid: (value: boolean) => void;\n  selectedEquation: EquationType;\n  setSelectedEquation: (value: EquationType) => void;\n}\n\nexport default function ControlPanel({\n  singleValue,\n  setSingleValue,\n  rangeStart,\n  setRangeStart,\n  rangeEnd,\n  setRangeEnd,\n  rangeInterval,\n  setRangeInterval,\n  onGenerateRange,\n  graphXMin,\n  setGraphXMin,\n  graphXMax,\n  setGraphXMax,\n  showGrid,\n  setShowGrid,\n  selectedEquation,\n  setSelectedEquation\n}: ControlPanelProps) {\n  const [singleResult, setSingleResult] = useState({ original: 0, alternative: 0 });\n\n  useEffect(() => {\n    if (singleValue > 0) {\n      setSingleResult(calculateBothEquations(singleValue));\n    } else {\n      setSingleResult({ original: 0, alternative: 0 });\n    }\n  }, [singleValue]);\n\n  const handleGenerateRange = () => {\n    if (rangeStart >= rangeEnd) {\n      alert('Start value must be less than end value');\n      return;\n    }\n    if (rangeInterval <= 0) {\n      alert('Interval must be greater than 0');\n      return;\n    }\n    onGenerateRange();\n  };\n\n  return (\n    <div className=\"lg:col-span-1 space-y-6\">\n      {/* Equation Selection */}\n      <div className=\"bg-white rounded-xl shadow-lg border border-light-border p-6\">\n        <h3 className=\"text-lg font-semibold text-dark-slate mb-4 flex items-center\">\n          <span className=\"w-2 h-2 bg-red-500 rounded-full mr-2\"></span>\n          Equation Selection\n        </h3>\n        <div className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"equationSelect\" className=\"block text-sm font-medium text-dark-slate mb-2\">\n              Choose Equation(s)\n            </Label>\n            <Select value={selectedEquation} onValueChange={setSelectedEquation}>\n              <SelectTrigger className=\"w-full\">\n                <SelectValue placeholder=\"Select equation\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"original\">Original Equation</SelectItem>\n                <SelectItem value=\"alternative\">Alternative Equation (Original - 0.08)</SelectItem>\n                <SelectItem value=\"both\">Both Equations</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n      </div>\n\n      {/* Single Value Calculator */}\n      <div className=\"bg-white rounded-xl shadow-lg border border-light-border p-6\">\n        <h3 className=\"text-lg font-semibold text-dark-slate mb-4 flex items-center\">\n          <span className=\"w-2 h-2 bg-scientific-blue rounded-full mr-2\"></span>\n          Single Value Calculator\n        </h3>\n        <div className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"singleValue\" className=\"block text-sm font-medium text-dark-slate mb-2\">\n              Square Feet\n            </Label>\n            <Input\n              id=\"singleValue\"\n              type=\"number\"\n              className=\"w-full px-4 py-3 border border-light-border rounded-lg focus:ring-2 focus:ring-scientific-blue focus:border-transparent font-mono text-lg\"\n              placeholder=\"1000\"\n              min=\"1\"\n              step=\"0.01\"\n              value={singleValue || ''}\n              onChange={(e) => setSingleValue(parseFloat(e.target.value) || 0)}\n            />\n          </div>\n          <div className=\"space-y-3\">\n            {(selectedEquation === 'original' || selectedEquation === 'both') && (\n              <div className=\"bg-gradient-to-r from-blue-50 to-green-50 rounded-lg p-4 border border-light-border\">\n                <div className=\"text-sm font-medium text-gray-600 mb-1\">Original Equation Result</div>\n                <div className=\"font-mono text-2xl font-bold text-dark-slate\">\n                  {singleResult.original.toFixed(5)}\n                </div>\n                <div className=\"text-sm font-medium text-gray-600 mt-3 mb-1\">Total Hours</div>\n                <div className=\"font-mono text-lg font-semibold text-calculation-green\">\n                  {(singleResult.original * singleValue).toFixed(2)}\n                </div>\n              </div>\n            )}\n            {(selectedEquation === 'alternative' || selectedEquation === 'both') && (\n              <div className=\"bg-gradient-to-r from-red-50 to-orange-50 rounded-lg p-4 border border-light-border\">\n                <div className=\"text-sm font-medium text-gray-600 mb-1\">Alternative Equation Result</div>\n                <div className=\"font-mono text-2xl font-bold text-dark-slate\">\n                  {singleResult.alternative.toFixed(5)}\n                </div>\n                <div className=\"text-sm font-medium text-gray-600 mt-3 mb-1\">Total Hours</div>\n                <div className=\"font-mono text-lg font-semibold text-calculation-green\">\n                  {(singleResult.alternative * singleValue).toFixed(2)}\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Range Calculator */}\n      <div className=\"bg-white rounded-xl shadow-lg border border-light-border p-6\">\n        <h3 className=\"text-lg font-semibold text-dark-slate mb-4 flex items-center\">\n          <span className=\"w-2 h-2 bg-calculation-green rounded-full mr-2\"></span>\n          Range Calculator\n        </h3>\n        <div className=\"space-y-4\">\n          <div className=\"grid grid-cols-2 gap-3\">\n            <div>\n              <Label htmlFor=\"rangeStart\" className=\"block text-sm font-medium text-dark-slate mb-2\">\n                Start (sq-ft)\n              </Label>\n              <Input\n                id=\"rangeStart\"\n                type=\"number\"\n                className=\"w-full px-3 py-2 border border-light-border rounded-lg focus:ring-2 focus:ring-calculation-green focus:border-transparent font-mono\"\n                placeholder=\"100\"\n                min=\"1\"\n                step=\"1\"\n                value={rangeStart || ''}\n                onChange={(e) => setRangeStart(parseFloat(e.target.value) || 0)}\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"rangeEnd\" className=\"block text-sm font-medium text-dark-slate mb-2\">\n                End (sq-ft)\n              </Label>\n              <Input\n                id=\"rangeEnd\"\n                type=\"number\"\n                className=\"w-full px-3 py-2 border border-light-border rounded-lg focus:ring-2 focus:ring-calculation-green focus:border-transparent font-mono\"\n                placeholder=\"5000\"\n                min=\"1\"\n                step=\"1\"\n                value={rangeEnd || ''}\n                onChange={(e) => setRangeEnd(parseFloat(e.target.value) || 0)}\n              />\n            </div>\n          </div>\n          <div>\n            <Label htmlFor=\"rangeInterval\" className=\"block text-sm font-medium text-dark-slate mb-2\">\n              Interval\n            </Label>\n            <Input\n              id=\"rangeInterval\"\n              type=\"number\"\n              className=\"w-full px-3 py-2 border border-light-border rounded-lg focus:ring-2 focus:ring-calculation-green focus:border-transparent font-mono\"\n              placeholder=\"100\"\n              min=\"1\"\n              step=\"1\"\n              value={rangeInterval || ''}\n              onChange={(e) => setRangeInterval(parseFloat(e.target.value) || 0)}\n            />\n          </div>\n          <Button\n            onClick={handleGenerateRange}\n            className=\"w-full bg-calculation-green text-white py-3 px-4 rounded-lg hover:bg-green-600 font-medium transition-colors duration-200\"\n          >\n            Generate Data Table\n          </Button>\n        </div>\n      </div>\n\n      {/* Graph Controls */}\n      <div className=\"bg-white rounded-xl shadow-lg border border-light-border p-6\">\n        <h3 className=\"text-lg font-semibold text-dark-slate mb-4 flex items-center\">\n          <span className=\"w-2 h-2 bg-accent-purple rounded-full mr-2\"></span>\n          Graph Controls\n        </h3>\n        <div className=\"space-y-4\">\n          <div className=\"grid grid-cols-2 gap-3\">\n            <div>\n              <Label htmlFor=\"xMin\" className=\"block text-sm font-medium text-dark-slate mb-2\">\n                X Min\n              </Label>\n              <Input\n                id=\"xMin\"\n                type=\"number\"\n                className=\"w-full px-3 py-2 border border-light-border rounded-lg focus:ring-2 focus:ring-accent-purple focus:border-transparent font-mono text-sm\"\n                placeholder=\"0\"\n                value={graphXMin || ''}\n                onChange={(e) => setGraphXMin(parseFloat(e.target.value) || 0)}\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"xMax\" className=\"block text-sm font-medium text-dark-slate mb-2\">\n                X Max\n              </Label>\n              <Input\n                id=\"xMax\"\n                type=\"number\"\n                className=\"w-full px-3 py-2 border border-light-border rounded-lg focus:ring-2 focus:ring-accent-purple focus:border-transparent font-mono text-sm\"\n                placeholder=\"10000\"\n                value={graphXMax || ''}\n                onChange={(e) => setGraphXMax(parseFloat(e.target.value) || 0)}\n              />\n            </div>\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm font-medium text-dark-slate\">Show Grid</span>\n            <Switch\n              checked={showGrid}\n              onCheckedChange={setShowGrid}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10362},"client/src/components/calculator/data-table.tsx":{"content":"import { Button } from '@/components/ui/button';\nimport { RangeData, downloadCSV, EquationType } from '@/lib/calculations';\n\ninterface DataTableProps {\n  data: RangeData[];\n  onExportCSV: () => void;\n  selectedEquation: EquationType;\n}\n\nexport default function DataTable({ data, onExportCSV, selectedEquation }: DataTableProps) {\n  const handleExportCSV = () => {\n    if (data.length > 0) {\n      downloadCSV(data, selectedEquation);\n    }\n  };\n\n  return (\n    <div className=\"bg-white rounded-xl shadow-lg border border-light-border p-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h3 className=\"text-lg font-semibold text-dark-slate\">Generated Data Table</h3>\n        <div className=\"flex items-center space-x-2\">\n          <span className=\"text-sm text-gray-600\">{data.length} entries</span>\n          <Button\n            variant=\"ghost\"\n            onClick={handleExportCSV}\n            disabled={data.length === 0}\n            className=\"px-3 py-1 bg-gray-100 text-gray-600 rounded text-sm hover:bg-gray-200 transition-colors duration-200 disabled:opacity-50\"\n          >\n            Export CSV\n          </Button>\n        </div>\n      </div>\n      \n      {data.length === 0 ? (\n        <div className=\"text-center py-12 text-gray-500\">\n          <div className=\"w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n            📊\n          </div>\n          <h4 className=\"font-medium mb-2\">No data generated yet</h4>\n          <p className=\"text-sm\">Use the range calculator to generate a data table</p>\n        </div>\n      ) : (\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full\">\n            <thead>\n              <tr className=\"border-b border-light-border\">\n                <th className=\"text-left py-3 px-4 font-semibold text-dark-slate text-sm\">Square Feet</th>\n                {selectedEquation === 'original' && (\n                  <>\n                    <th className=\"text-left py-3 px-4 font-semibold text-dark-slate text-sm\">Hourly Factor</th>\n                    <th className=\"text-left py-3 px-4 font-semibold text-dark-slate text-sm\">Total Hours</th>\n                    <th className=\"text-left py-3 px-4 font-semibold text-dark-slate text-sm\">Hours Diff</th>\n                  </>\n                )}\n                {selectedEquation === 'alternative' && (\n                  <>\n                    <th className=\"text-left py-3 px-4 font-semibold text-dark-slate text-sm\">Hourly Factor</th>\n                    <th className=\"text-left py-3 px-4 font-semibold text-dark-slate text-sm\">Total Hours</th>\n                    <th className=\"text-left py-3 px-4 font-semibold text-dark-slate text-sm\">Hours Diff</th>\n                  </>\n                )}\n                {selectedEquation === 'both' && (\n                  <>\n                    <th className=\"text-left py-3 px-4 font-semibold text-dark-slate text-sm\">Original HF</th>\n                    <th className=\"text-left py-3 px-4 font-semibold text-dark-slate text-sm\">Original Hours</th>\n                    <th className=\"text-left py-3 px-4 font-semibold text-dark-slate text-sm\">Original Hours Diff</th>\n                    <th className=\"text-left py-3 px-4 font-semibold text-dark-slate text-sm\">Alternative HF</th>\n                    <th className=\"text-left py-3 px-4 font-semibold text-dark-slate text-sm\">Alternative Hours</th>\n                    <th className=\"text-left py-3 px-4 font-semibold text-dark-slate text-sm\">Alternative Hours Diff</th>\n                  </>\n                )}\n              </tr>\n            </thead>\n            <tbody className=\"divide-y divide-light-border\">\n              {data.map((row, index) => (\n                <tr key={index} className=\"hover:bg-gray-50 transition-colors duration-200\">\n                  <td className=\"py-3 px-4 font-mono text-sm\">{row.squareFeet.toFixed(0)}</td>\n                  {selectedEquation === 'original' && (\n                    <>\n                      <td className=\"py-3 px-4 font-mono text-sm text-scientific-blue font-medium\">\n                        {row.hourlyFactor.toFixed(5)}\n                      </td>\n                      <td className=\"py-3 px-4 font-mono text-sm text-calculation-green font-medium\">\n                        {row.totalHours.toFixed(2)}\n                      </td>\n                      <td className=\"py-3 px-4 font-mono text-sm text-gray-600\">\n                        {row.hoursDifference?.toFixed(2) || '-'}\n                      </td>\n                    </>\n                  )}\n                  {selectedEquation === 'alternative' && (\n                    <>\n                      <td className=\"py-3 px-4 font-mono text-sm text-red-500 font-medium\">\n                        {row.hourlyFactorAlt?.toFixed(5) || '-'}\n                      </td>\n                      <td className=\"py-3 px-4 font-mono text-sm text-calculation-green font-medium\">\n                        {row.totalHoursAlt?.toFixed(2) || '-'}\n                      </td>\n                      <td className=\"py-3 px-4 font-mono text-sm text-gray-600\">\n                        {row.hoursDifferenceAlt?.toFixed(2) || '-'}\n                      </td>\n                    </>\n                  )}\n                  {selectedEquation === 'both' && (\n                    <>\n                      <td className=\"py-3 px-4 font-mono text-sm text-scientific-blue font-medium\">\n                        {row.hourlyFactor.toFixed(5)}\n                      </td>\n                      <td className=\"py-3 px-4 font-mono text-sm text-calculation-green font-medium\">\n                        {row.totalHours.toFixed(2)}\n                      </td>\n                      <td className=\"py-3 px-4 font-mono text-sm text-gray-600\">\n                        {row.hoursDifference?.toFixed(2) || '-'}\n                      </td>\n                      <td className=\"py-3 px-4 font-mono text-sm text-red-500 font-medium\">\n                        {row.hourlyFactorAlt?.toFixed(5) || '-'}\n                      </td>\n                      <td className=\"py-3 px-4 font-mono text-sm text-calculation-green font-medium\">\n                        {row.totalHoursAlt?.toFixed(2) || '-'}\n                      </td>\n                      <td className=\"py-3 px-4 font-mono text-sm text-gray-600\">\n                        {row.hoursDifferenceAlt?.toFixed(2) || '-'}\n                      </td>\n                    </>\n                  )}\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":6587},"client/src/components/calculator/equation-display.tsx":{"content":"import { EquationType } from '@/lib/calculations';\n\ninterface EquationDisplayProps {\n  selectedEquation: EquationType;\n}\n\nexport default function EquationDisplay({ selectedEquation }: EquationDisplayProps) {\n  return (\n    <div className=\"bg-white rounded-xl shadow-lg border border-light-border p-6 mb-8\">\n      <h2 className=\"text-lg font-semibold text-dark-slate mb-4\">Hourly Factor Equations</h2>\n      \n      {/* Original Equation */}\n      <div className={`bg-gray-50 rounded-lg p-4 border border-light-border mb-4 transition-opacity duration-200 ${\n        selectedEquation === 'alternative' ? 'opacity-50' : 'opacity-100'\n      }`}>\n        <div className=\"text-sm font-medium text-gray-600 mb-2\">Original Equation:</div>\n        <div className=\"font-mono text-lg text-center\">\n          <span className=\"text-dark-slate\">HF = </span>\n          <span className=\"text-scientific-blue font-semibold\">0.21767</span>\n          <span className=\"text-dark-slate\"> + </span>\n          <span className=\"text-calculation-green font-semibold\">11.21274</span>\n          <span className=\"text-dark-slate\"> × (sq-feet)</span>\n          <sup className=\"text-accent-purple font-semibold\">-0.53816</sup>\n        </div>\n      </div>\n\n      {/* Alternative Equation */}\n      <div className={`bg-gray-50 rounded-lg p-4 border border-light-border transition-opacity duration-200 ${\n        selectedEquation === 'original' ? 'opacity-50' : 'opacity-100'\n      }`}>\n        <div className=\"text-sm font-medium text-gray-600 mb-2\">Alternative Equation:</div>\n        <div className=\"font-mono text-lg text-center\">\n          <span className=\"text-dark-slate\">HF = </span>\n          <span className=\"text-scientific-blue font-semibold\">0.21767</span>\n          <span className=\"text-dark-slate\"> + </span>\n          <span className=\"text-calculation-green font-semibold\">11.21274</span>\n          <span className=\"text-dark-slate\"> × (sq-feet)</span>\n          <sup className=\"text-accent-purple font-semibold\">-0.53816</sup>\n          <span className=\"text-red-500 font-semibold\"> - 0.08</span>\n        </div>\n      </div>\n      \n      <div className=\"text-sm text-gray-600 text-center mt-4\">\n        Where sq-feet is the square footage input value\n      </div>\n    </div>\n  );\n}\n","size_bytes":2268},"client/src/components/calculator/interactive-graph.tsx":{"content":"import { useEffect, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { generateChartData, EquationType } from '@/lib/calculations';\n\ninterface InteractiveGraphProps {\n  currentPoint: { x: number; y: number; yAlt?: number };\n  graphXMin: number;\n  graphXMax: number;\n  showGrid: boolean;\n  onResetZoom: () => void;\n  selectedEquation: EquationType;\n}\n\ndeclare global {\n  interface Window {\n    Chart: any;\n  }\n}\n\nexport default function InteractiveGraph({\n  currentPoint,\n  graphXMin,\n  graphXMax,\n  showGrid,\n  onResetZoom,\n  selectedEquation\n}: InteractiveGraphProps) {\n  const chartRef = useRef<HTMLCanvasElement>(null);\n  const chartInstance = useRef<any>(null);\n\n  useEffect(() => {\n    // Load Chart.js dynamically\n    const loadChart = async () => {\n      if (!window.Chart) {\n        const script = document.createElement('script');\n        script.src = 'https://cdn.jsdelivr.net/npm/chart.js';\n        script.onload = initChart;\n        document.head.appendChild(script);\n      } else {\n        initChart();\n      }\n    };\n\n    const initChart = () => {\n      if (!chartRef.current || !window.Chart) return;\n\n      const ctx = chartRef.current.getContext('2d');\n      if (!ctx) return;\n\n      // Destroy existing chart\n      if (chartInstance.current) {\n        chartInstance.current.destroy();\n      }\n\n      const min = graphXMin || 100;\n      const max = graphXMax || 10000;\n      const chartData = generateChartData(min, max, 100, selectedEquation);\n      \n      const datasets: any[] = [];\n      \n      // Original equation dataset\n      if (selectedEquation === 'original' || selectedEquation === 'both') {\n        datasets.push({\n          label: 'Original Equation',\n          data: chartData.map(point => ({ x: point.x, y: point.y })),\n          borderColor: '#2563EB',\n          backgroundColor: 'rgba(37, 99, 235, 0.1)',\n          borderWidth: 2,\n          fill: false,\n          tension: 0.4,\n          pointRadius: 0,\n          pointHoverRadius: 6,\n          pointHoverBackgroundColor: '#2563EB',\n          pointHoverBorderColor: '#ffffff',\n          pointHoverBorderWidth: 2\n        });\n      }\n      \n      // Alternative equation dataset\n      if (selectedEquation === 'alternative' || selectedEquation === 'both') {\n        datasets.push({\n          label: 'Alternative Equation',\n          data: chartData.map(point => ({ x: point.x, y: point.yAlt || point.y - 0.08 })),\n          borderColor: '#EF4444',\n          backgroundColor: 'rgba(239, 68, 68, 0.1)',\n          borderWidth: 2,\n          fill: false,\n          tension: 0.4,\n          pointRadius: 0,\n          pointHoverRadius: 6,\n          pointHoverBackgroundColor: '#EF4444',\n          pointHoverBorderColor: '#ffffff',\n          pointHoverBorderWidth: 2\n        });\n      }\n      \n      // Current point for original equation\n      if (selectedEquation === 'original' || selectedEquation === 'both') {\n        datasets.push({\n          label: 'Current Point (Original)',\n          data: [{ x: currentPoint.x, y: currentPoint.y }],\n          borderColor: '#10B981',\n          backgroundColor: '#10B981',\n          borderWidth: 0,\n          pointRadius: 8,\n          pointHoverRadius: 10,\n          showLine: false\n        });\n      }\n      \n      // Current point for alternative equation\n      if ((selectedEquation === 'alternative' || selectedEquation === 'both') && currentPoint.yAlt !== undefined) {\n        datasets.push({\n          label: 'Current Point (Alternative)',\n          data: [{ x: currentPoint.x, y: currentPoint.yAlt }],\n          borderColor: '#F97316',\n          backgroundColor: '#F97316',\n          borderWidth: 0,\n          pointRadius: 8,\n          pointHoverRadius: 10,\n          showLine: false\n        });\n      }\n      \n      chartInstance.current = new window.Chart(ctx, {\n        type: 'line',\n        data: { datasets },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            x: {\n              type: 'linear',\n              title: {\n                display: true,\n                text: 'Square Feet',\n                font: {\n                  family: 'Inter',\n                  weight: '500'\n                },\n                color: '#1E293B'\n              },\n              grid: {\n                display: showGrid,\n                color: '#E2E8F0'\n              },\n              ticks: {\n                color: '#64748B'\n              },\n              min: min,\n              max: max\n            },\n            y: {\n              title: {\n                display: true,\n                text: 'Hourly Factor',\n                font: {\n                  family: 'Inter',\n                  weight: '500'\n                },\n                color: '#1E293B'\n              },\n              grid: {\n                display: showGrid,\n                color: '#E2E8F0'\n              },\n              ticks: {\n                color: '#64748B'\n              }\n            }\n          },\n          plugins: {\n            legend: {\n              display: false\n            },\n            tooltip: {\n              mode: 'nearest',\n              intersect: false,\n              backgroundColor: 'white',\n              titleColor: '#1E293B',\n              bodyColor: '#64748B',\n              borderColor: '#E2E8F0',\n              borderWidth: 1,\n              cornerRadius: 8,\n              displayColors: false,\n              titleFont: {\n                family: 'JetBrains Mono',\n                weight: '500'\n              },\n              bodyFont: {\n                family: 'JetBrains Mono'\n              },\n              callbacks: {\n                title: function(tooltipItems: any[]) {\n                  return `Square Feet: ${tooltipItems[0].parsed.x.toFixed(0)}`;\n                },\n                label: function(tooltipItem: any) {\n                  return `Hourly Factor: ${tooltipItem.parsed.y.toFixed(5)}`;\n                }\n              }\n            }\n          },\n          interaction: {\n            intersect: false,\n            mode: 'nearest'\n          }\n        }\n      });\n    };\n\n    loadChart();\n\n    return () => {\n      if (chartInstance.current) {\n        chartInstance.current.destroy();\n      }\n    };\n  }, [graphXMin, graphXMax, showGrid, selectedEquation]);\n\n  useEffect(() => {\n    if (chartInstance.current && chartInstance.current.data && chartInstance.current.data.datasets) {\n      // Update current point datasets based on selected equation\n      const datasets = chartInstance.current.data.datasets;\n      \n      // Find and update original current point dataset\n      const originalPointIndex = datasets.findIndex((d: any) => d.label === 'Current Point (Original)');\n      if (originalPointIndex !== -1 && (selectedEquation === 'original' || selectedEquation === 'both')) {\n        datasets[originalPointIndex].data = [{ x: currentPoint.x, y: currentPoint.y }];\n      }\n      \n      // Find and update alternative current point dataset\n      const altPointIndex = datasets.findIndex((d: any) => d.label === 'Current Point (Alternative)');\n      if (altPointIndex !== -1 && (selectedEquation === 'alternative' || selectedEquation === 'both') && currentPoint.yAlt !== undefined) {\n        datasets[altPointIndex].data = [{ x: currentPoint.x, y: currentPoint.yAlt }];\n      }\n      \n      chartInstance.current.update('none');\n    }\n  }, [currentPoint, selectedEquation]);\n\n  return (\n    <div className=\"bg-white rounded-xl shadow-lg border border-light-border p-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h3 className=\"text-lg font-semibold text-dark-slate\">Interactive Graph</h3>\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"text-sm text-gray-600 font-mono\">\n            Point: ({currentPoint.x.toFixed(0)}, {currentPoint.y.toFixed(5)})\n          </div>\n          <Button\n            variant=\"ghost\"\n            onClick={onResetZoom}\n            className=\"text-scientific-blue hover:text-blue-700 text-sm font-medium\"\n          >\n            Reset Zoom\n          </Button>\n        </div>\n      </div>\n      <div className=\"relative\">\n        <canvas\n          ref={chartRef}\n          className=\"w-full h-96 border border-light-border rounded-lg\"\n        />\n      </div>\n    </div>\n  );\n}\n","size_bytes":8300},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"shared/budget-calculations.ts":{"content":"import type { BudgetInput, BudgetCalculationResult, BuildingCostRange, EngineeringCost } from './schema';\n\n// Parse percentage string to decimal (e.g., \"6.0%\" -> 0.06)\nfunction parsePercentage(percentStr: string): number {\n  if (typeof percentStr !== 'string') return 0;\n  const cleaned = percentStr.replace('%', '').trim();\n  const num = parseFloat(cleaned);\n  return isNaN(num) ? 0 : num / 100;\n}\n\n// Engineering discipline categories we expect\nconst ENGINEERING_DISCIPLINES = [\n  'Civil & Site',\n  'Structural', \n  'Mechanical',\n  'Electrical',\n  'Plumbing',\n  'Low-Voltage'\n];\n\nexport function calculateMinimumBudget(\n  input: BudgetInput,\n  costRange: BuildingCostRange,\n  engineeringCosts: EngineeringCost[]\n): BudgetCalculationResult {\n  const notes: string[] = [];\n  \n  // Basic calculations\n  const total_sf = input.new_area_ft2 + input.existing_area_ft2;\n  const total_low = total_sf * costRange.allInMin;\n  const total_high = total_sf * costRange.allInMax;\n  const proposed = (total_low + total_high) / 2;\n  \n  // Calculate construction ratios (New Construction vs Existing to Remodel)\n  const new_construction_ratio = input.new_area_ft2 / total_sf;\n  const existing_remodel_ratio = input.existing_area_ft2 / total_sf;\n  \n  // Convert shares from decimal strings to numbers\n  const shell_share = parseFloat(costRange.archShare.toString());\n  const interior_share = parseFloat(costRange.intShare.toString());\n  const landscape_share = parseFloat(costRange.landShare.toString());\n  \n  // Check if shares sum to approximately 1.0\n  const shareSum = shell_share + interior_share + landscape_share;\n  if (Math.abs(shareSum - 1.0) > 0.005) {\n    notes.push(`Warning: Project shares sum to ${shareSum.toFixed(3)} instead of 1.000`);\n  }\n  \n  // Calculate minimum budgets\n  const shell_min = proposed * shell_share;\n  const interior_min = proposed * interior_share;\n  const land_min = proposed * landscape_share;\n  \n  // Process engineering costs with enhanced formula\n  const engineering_budgets: Record<string, number> & { sum: number } = { sum: 0 };\n  const design_shares: Record<string, number> = {};\n  \n  let total_eng_percent = 0;\n  \n  // Initialize all disciplines to 0\n  ENGINEERING_DISCIPLINES.forEach(discipline => {\n    engineering_budgets[discipline] = 0;\n  });\n  \n  // Process available engineering cost data with enhanced formula\n  // Formula: (proposed * percentage * new_ratio) + (proposed * percentage * existing_ratio * 0.5)\n  engineeringCosts.forEach(engCost => {\n    const category = engCost.category;\n    const percent = parsePercentage(engCost.percentAvg);\n    \n    if (ENGINEERING_DISCIPLINES.includes(category)) {\n      const new_portion = proposed * percent * new_construction_ratio;\n      const existing_portion = proposed * percent * existing_remodel_ratio * 0.5;\n      engineering_budgets[category] = new_portion + existing_portion;\n      total_eng_percent += percent;\n    }\n  });\n  \n  // Check for missing disciplines\n  const missingDisciplines = ENGINEERING_DISCIPLINES.filter(\n    discipline => engineering_budgets[discipline] === 0\n  );\n  if (missingDisciplines.length > 0) {\n    notes.push(`Missing engineering data for: ${missingDisciplines.join(', ')}`);\n  }\n  \n  // Calculate sum of engineering budgets\n  engineering_budgets.sum = ENGINEERING_DISCIPLINES.reduce(\n    (sum, discipline) => sum + engineering_budgets[discipline], 0\n  );\n  \n  // Calculate architecture budget (shell budget minus engineering)\n  const architecture_budget = Math.max(0, shell_min - engineering_budgets.sum);\n  \n  if (architecture_budget === 0) {\n    notes.push('Architecture budget clamped to $0 (engineering costs exceed shell budget)');\n  }\n  \n  // Calculate design shares\n  const arch_design_share = shell_share * (1 - total_eng_percent);\n  design_shares['Architecture'] = arch_design_share;\n  design_shares['Interior'] = interior_share;\n  design_shares['Landscape'] = landscape_share;\n  \n  // Add engineering design shares\n  ENGINEERING_DISCIPLINES.forEach(discipline => {\n    const engCost = engineeringCosts.find(ec => ec.category === discipline);\n    if (engCost) {\n      design_shares[discipline] = shell_share * parsePercentage(engCost.percentAvg);\n    } else {\n      design_shares[discipline] = 0;\n    }\n  });\n  \n  // Calculate detailed breakdown for each discipline\n  const discipline_breakdown: any = {};\n  \n  // Architecture breakdown (100% for both new and existing)\n  const arch_new = architecture_budget * new_construction_ratio;\n  const arch_existing = architecture_budget * existing_remodel_ratio;\n  discipline_breakdown.architecture = {\n    total: architecture_budget,\n    new_construction: arch_new,\n    existing_remodel: arch_existing,\n  };\n  \n  // Interior breakdown (100% for both new and existing)\n  const interior_new = interior_min * new_construction_ratio;\n  const interior_existing = interior_min * existing_remodel_ratio;\n  discipline_breakdown.interior = {\n    total: interior_min,\n    new_construction: interior_new,\n    existing_remodel: interior_existing,\n  };\n  \n  // Landscape breakdown (100% for both new and existing)\n  const land_new = land_min * new_construction_ratio;\n  const land_existing = land_min * existing_remodel_ratio;\n  discipline_breakdown.landscape = {\n    total: land_min,\n    new_construction: land_new,\n    existing_remodel: land_existing,\n  };\n  \n  // Engineering disciplines breakdown (existing areas at 50% cost)\n  ENGINEERING_DISCIPLINES.forEach(discipline => {\n    const engCost = engineeringCosts.find(ec => ec.category === discipline);\n    if (engCost) {\n      const percent = parsePercentage(engCost.percentAvg);\n      const new_portion = proposed * percent * new_construction_ratio;\n      const existing_portion = proposed * percent * existing_remodel_ratio * 0.5;\n      \n      discipline_breakdown[discipline.toLowerCase().replace(/[^a-z0-9]/g, '_')] = {\n        total: engineering_budgets[discipline],\n        new_construction: new_portion,\n        existing_remodel: existing_portion,\n      };\n    }\n  });\n  \n  // Working budget calculation (sum of all disciplines)\n  const working_budget = architecture_budget + interior_min + land_min + engineering_budgets.sum;\n  \n  return {\n    inputs: input,\n    all_in: {\n      min_psf: costRange.allInMin,\n      max_psf: costRange.allInMax\n    },\n    area: {\n      total_sf\n    },\n    total_cost: {\n      low: Math.round(total_low * 100) / 100,\n      high: Math.round(total_high * 100) / 100,\n      proposed: Math.round(proposed * 100) / 100\n    },\n    shares: {\n      shell: shell_share,\n      interior: interior_share,\n      landscape: landscape_share\n    },\n    minimum_budgets: {\n      shell: Math.round(shell_min * 100) / 100,\n      interior: Math.round(interior_min * 100) / 100,\n      landscape: Math.round(land_min * 100) / 100\n    },\n    design_shares,\n    engineering_budgets: Object.fromEntries(\n      Object.entries(engineering_budgets).map(([key, value]) => [\n        key, \n        Math.round(value * 100) / 100\n      ])\n    ) as Record<string, number> & { sum: number },\n    architecture_budget: Math.round(architecture_budget * 100) / 100,\n    working_budget: Math.round(working_budget * 100) / 100,\n    construction_ratios: {\n      new_construction: Math.round(new_construction_ratio * 1000) / 1000,\n      existing_remodel: Math.round(existing_remodel_ratio * 1000) / 1000,\n    },\n    discipline_breakdown: Object.fromEntries(\n      Object.entries(discipline_breakdown).map(([key, breakdown]: [string, any]) => [\n        key,\n        {\n          total: Math.round(breakdown.total * 100) / 100,\n          new_construction: Math.round(breakdown.new_construction * 100) / 100,\n          existing_remodel: Math.round(breakdown.existing_remodel * 100) / 100,\n        }\n      ])\n    ) as any,\n    notes\n  };\n}","size_bytes":7741},"client/src/lib/budget-calculations.ts":{"content":"import { calculateMinimumBudget } from '@shared/budget-calculations';\nimport type { BudgetInput, BudgetCalculationResult, BuildingCostRange, EngineeringCost } from '@shared/schema';\n\nexport { calculateMinimumBudget };\n\n// Unit test for the acceptance case\nexport function runAcceptanceTest(): boolean {\n  // Test data for \"Mid-Range Standard Residential\", tier 1, 1000 new + 4407 existing\n  const testInput: BudgetInput = {\n    building_type: \"Mid-Range Standard Residential\",\n    tier: 1,\n    new_area_ft2: 1000,\n    existing_area_ft2: 4407,\n    site_area_m2: 972.98\n  };\n  \n  const testCostRange: BuildingCostRange = {\n    buildingType: \"Mid-Range Standard Residential\",\n    tier: 1,\n    allInMin: 300,\n    allInMax: 320,\n    archShare: \"0.66\" as any,\n    intShare: \"0.22\" as any,\n    landShare: \"0.12\" as any\n  };\n  \n  const testEngineeringCosts: EngineeringCost[] = [\n    {\n      buildingType: \"Mid-Range Standard Residential\",\n      tier: 1,\n      category: \"Civil & Site\",\n      percentAvg: \"3.3%\",\n      percentMin: \"0\" as any,\n      percentMax: \"0\" as any,\n      costMinPsf: \"0\" as any,\n      costMaxPsf: \"0\" as any\n    },\n    {\n      buildingType: \"Mid-Range Standard Residential\", \n      tier: 1,\n      category: \"Structural\",\n      percentAvg: \"9.57%\",\n      percentMin: \"0\" as any,\n      percentMax: \"0\" as any,\n      costMinPsf: \"0\" as any,\n      costMaxPsf: \"0\" as any\n    },\n    {\n      buildingType: \"Mid-Range Standard Residential\",\n      tier: 1, \n      category: \"Mechanical\",\n      percentAvg: \"3.96%\",\n      percentMin: \"0\" as any,\n      percentMax: \"0\" as any,\n      costMinPsf: \"0\" as any,\n      costMaxPsf: \"0\" as any\n    },\n    {\n      buildingType: \"Mid-Range Standard Residential\",\n      tier: 1,\n      category: \"Electrical\", \n      percentAvg: \"2.97%\",\n      percentMin: \"0\" as any,\n      percentMax: \"0\" as any,\n      costMinPsf: \"0\" as any,\n      costMaxPsf: \"0\" as any\n    }\n  ];\n  \n  const result = calculateMinimumBudget(testInput, testCostRange, testEngineeringCosts);\n  \n  // Expected values from the specification\n  const expected = {\n    totalSf: 5407,\n    totalLow: 1622100,\n    totalHigh: 1730240,\n    proposed: 1676170,\n    shellMin: 1106272.2,\n    interiorMin: 368757.4,\n    landscapeMin: 201140.4,\n    workingBudget: 1676170\n  };\n  \n  const tolerance = 0.01;\n  const checks = [\n    Math.abs(result.area.total_sf - expected.totalSf) < tolerance,\n    Math.abs(result.total_cost.low - expected.totalLow) < tolerance,\n    Math.abs(result.total_cost.high - expected.totalHigh) < tolerance,\n    Math.abs(result.total_cost.proposed - expected.proposed) < tolerance,\n    Math.abs(result.minimum_budgets.shell - expected.shellMin) < tolerance,\n    Math.abs(result.minimum_budgets.interior - expected.interiorMin) < tolerance,\n    Math.abs(result.minimum_budgets.landscape - expected.landscapeMin) < tolerance,\n    Math.abs(result.working_budget - expected.workingBudget) < tolerance\n  ];\n  \n  return checks.every(check => check);\n}","size_bytes":2965},"client/src/pages/minimum-budget.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Progress } from '@/components/ui/progress';\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from '@/components/ui/collapsible';\nimport { TrendingUp, TrendingDown, Calculator, Building, DollarSign, PieChart, BarChart3, AlertTriangle, ChevronDown, ChevronUp } from 'lucide-react';\nimport { apiRequest } from '@/lib/queryClient';\nimport type { BudgetInput, BudgetCalculationResult } from '@shared/schema';\n\ninterface BudgetFormData {\n  building_type: string;\n  tier: number;\n  new_area_ft2: number;\n  existing_area_ft2: number;\n  site_area_m2: number;\n}\n\nfunction formatCurrency(amount: number): string {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  }).format(amount);\n}\n\nfunction formatPercent(value: number): string {\n  return new Intl.NumberFormat('en-US', {\n    style: 'percent',\n    minimumFractionDigits: 1,\n    maximumFractionDigits: 1,\n  }).format(value);\n}\n\nexport default function MinimumBudgetCalculator() {\n  const [formData, setFormData] = useState<BudgetFormData>({\n    building_type: '',\n    tier: 1,\n    new_area_ft2: 1000,\n    existing_area_ft2: 4407,\n    site_area_m2: 973,\n  });\n\n  const [result, setResult] = useState<BudgetCalculationResult | null>(null);\n  const [selectedDisciplines, setSelectedDisciplines] = useState<Set<string>>(new Set());\n  const [expandedTableRows, setExpandedTableRows] = useState<Set<string>>(new Set());\n  const [hasFeeMatrix, setHasFeeMatrix] = useState(false);\n  const queryClient = useQueryClient();\n\n  // Check if fee matrix calculation exists\n  useEffect(() => {\n    const feeMatrixResult = localStorage.getItem('feeMatrixResult');\n    setHasFeeMatrix(!!feeMatrixResult);\n  }, []);\n\n  // Calculate total area immediately from form inputs\n  const totalArea = formData.new_area_ft2 + formData.existing_area_ft2;\n\n  // Fetch building types\n  const { data: buildingTypes = [] } = useQuery<string[]>({\n    queryKey: ['/api/building-types'],\n    queryFn: async () => {\n      const response = await fetch('/api/building-types');\n      return response.json();\n    },\n  });\n\n  // Fetch tiers for selected building type\n  const { data: tiersData } = useQuery<{ building_type: string; tiers: number[] }>({\n    queryKey: ['/api/building-types', formData.building_type, 'tiers'],\n    queryFn: async () => {\n      const response = await fetch(`/api/building-types/${encodeURIComponent(formData.building_type)}/tiers`);\n      return response.json();\n    },\n    enabled: !!formData.building_type,\n  });\n\n  // Calculate budget mutation\n  const calculateBudget = useMutation<BudgetCalculationResult, Error, BudgetInput>({\n    mutationFn: async (input: BudgetInput) => {\n      const response = await fetch('/api/calc/minimum-budget', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(input),\n      });\n      if (!response.ok) {\n        throw new Error('Failed to calculate budget');\n      }\n      return response.json();\n    },\n    onSuccess: (data: BudgetCalculationResult) => {\n      setResult(data);\n    },\n  });\n\n  // Auto-calculate when form changes\n  useEffect(() => {\n    if (formData.building_type && formData.tier) {\n      const input: BudgetInput = {\n        building_type: formData.building_type,\n        tier: formData.tier,\n        new_area_ft2: formData.new_area_ft2,\n        existing_area_ft2: formData.existing_area_ft2,\n        site_area_m2: formData.site_area_m2,\n      };\n      calculateBudget.mutate(input);\n    }\n  }, [formData]);\n\n  const handleInputChange = (field: keyof BudgetFormData, value: string | number) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value,\n    }));\n  };\n\n  // Reset tier when building type changes\n  useEffect(() => {\n    if (tiersData?.tiers && tiersData.tiers.length > 0 && !tiersData.tiers.includes(formData.tier)) {\n      setFormData(prev => ({ ...prev, tier: tiersData.tiers[0] }));\n    }\n  }, [tiersData, formData.tier]);\n\n\n  const toggleTableRow = (rowId: string) => {\n    const newExpanded = new Set(expandedTableRows);\n    if (newExpanded.has(rowId)) {\n      newExpanded.delete(rowId);\n    } else {\n      newExpanded.add(rowId);\n    }\n    setExpandedTableRows(newExpanded);\n  };\n\n  const toggleDisciplineSelection = (discipline: string) => {\n    const newSelected = new Set(selectedDisciplines);\n    if (newSelected.has(discipline)) {\n      newSelected.delete(discipline);\n    } else {\n      newSelected.add(discipline);\n    }\n    setSelectedDisciplines(newSelected);\n  };\n\n  const getSelectedBudgetTotal = () => {\n    if (!result) return 0;\n    let total = 0;\n    \n    if (selectedDisciplines.has('Architecture')) {\n      total += result.architecture_budget;\n    }\n    \n    Object.entries(result.engineering_budgets)\n      .filter(([key]) => key !== 'sum' && selectedDisciplines.has(key))\n      .forEach(([_, budget]) => {\n        total += budget;\n      });\n    \n    if (selectedDisciplines.has('Interior')) {\n      total += result.minimum_budgets.interior;\n    }\n    \n    if (selectedDisciplines.has('Landscape')) {\n      total += result.minimum_budgets.landscape;\n    }\n    \n    return total;\n  };\n\n  const StatCard = ({ title, value, change, icon: Icon, trend }: {\n    title: string;\n    value: string;\n    change?: string;\n    icon: any;\n    trend?: 'up' | 'down' | 'neutral';\n  }) => (\n    <Card className=\"relative overflow-hidden\">\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <CardTitle className=\"text-sm font-medium text-gray-600\">{title}</CardTitle>\n        <Icon className=\"h-4 w-4 text-gray-400\" />\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-2xl font-bold text-gray-900\">{value}</div>\n        {change && (\n          <div className={`flex items-center text-xs ${\n            trend === 'up' ? 'text-green-600' : trend === 'down' ? 'text-red-600' : 'text-gray-600'\n          }`}>\n            {trend === 'up' && <TrendingUp className=\"h-3 w-3 mr-1\" />}\n            {trend === 'down' && <TrendingDown className=\"h-3 w-3 mr-1\" />}\n            {change}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n\n\n  return (\n    <div className=\"bg-gray-50 font-inter text-dark-slate min-h-screen\">\n      {/* Header */}\n      <header className=\"bg-white border-b border-light-border shadow-sm\">\n        <div className=\"max-w-7xl mx-auto px-3 sm:px-6 lg:px-8\">\n          <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between h-auto sm:h-16 py-3 sm:py-0\">\n            <div className=\"flex items-center space-x-3 mb-3 sm:mb-0\">\n              <div className=\"w-10 h-10 bg-scientific-blue rounded-lg flex items-center justify-center\">\n                <Calculator className=\"h-6 w-6 text-white\" />\n              </div>\n              <div>\n                <h1 className=\"text-lg sm:text-xl font-semibold text-dark-slate\">Minimum Budget Calculator</h1>\n                <p className=\"text-xs sm:text-sm text-gray-500\">Project budget calculation & analysis</p>\n              </div>\n            </div>\n            <div className=\"flex items-center justify-center sm:justify-end space-x-2 sm:space-x-4\">\n              <Badge variant=\"outline\" className=\"px-2 sm:px-3 py-1 text-xs sm:text-sm\">\n                Live Calculation\n              </Badge>\n              {result && (\n                <div className=\"flex flex-col sm:flex-row gap-2 sm:gap-4 items-center\">\n                  {hasFeeMatrix && (\n                    <Badge variant=\"secondary\" className=\"px-2 py-1 text-xs bg-green-100 text-green-700 border-green-300\">\n                      ✓ Fees Calculated\n                    </Badge>\n                  )}\n                  <Button\n                    onClick={() => {\n                      // Store the budget result in localStorage and navigate to fee matrix\n                      localStorage.setItem('budgetResult', JSON.stringify(result));\n                      window.location.href = '/fee-matrix';\n                    }}\n                    className=\"px-2 sm:px-4 py-2 text-xs sm:text-sm bg-scientific-blue hover:bg-blue-600\"\n                  >\n                    <span className=\"hidden sm:inline\">{hasFeeMatrix ? 'Update Fees' : 'Calculate Fees'} →</span>\n                    <span className=\"sm:hidden\">{hasFeeMatrix ? 'Update' : 'Fees'} →</span>\n                  </Button>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <div className=\"max-w-7xl mx-auto px-3 sm:px-6 lg:px-8 py-4 sm:py-8\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-4 sm:gap-8\">\n          {/* Input Panel */}\n          <div className=\"lg:col-span-1\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Building className=\"h-5 w-5\" />\n                  Project Details\n                </CardTitle>\n                <CardDescription>\n                  Enter your project specifications for budget calculation\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"building-type\">Building Type</Label>\n                  <Select \n                    value={formData.building_type} \n                    onValueChange={(value) => handleInputChange('building_type', value)}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select building type\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {buildingTypes.map((type: string) => (\n                        <SelectItem key={type} value={type}>\n                          {type}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {tiersData?.tiers && (\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"tier\">Tier</Label>\n                    <Select \n                      value={formData.tier.toString()} \n                      onValueChange={(value) => handleInputChange('tier', parseInt(value))}\n                    >\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {tiersData.tiers.map((tier: number) => (\n                          <SelectItem key={tier} value={tier.toString()}>\n                            Tier {tier}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                )}\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"new-area\">New Building Area (ft²)</Label>\n                  <Input\n                    id=\"new-area\"\n                    type=\"number\"\n                    value={formData.new_area_ft2}\n                    onChange={(e) => handleInputChange('new_area_ft2', parseFloat(e.target.value) || 0)}\n                    className=\"text-right\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"existing-area\">Existing Building Area (ft²)</Label>\n                  <Input\n                    id=\"existing-area\"\n                    type=\"number\"\n                    value={formData.existing_area_ft2}\n                    onChange={(e) => handleInputChange('existing_area_ft2', parseFloat(e.target.value) || 0)}\n                    className=\"text-right\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"site-area\">Site Area (m²)</Label>\n                  <Input\n                    id=\"site-area\"\n                    type=\"number\"\n                    value={formData.site_area_m2}\n                    onChange={(e) => handleInputChange('site_area_m2', parseFloat(e.target.value) || 0)}\n                    className=\"text-right\"\n                  />\n                </div>\n\n                {calculateBudget.isPending && (\n                  <div className=\"flex items-center justify-center py-4\">\n                    <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-scientific-blue\"></div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Results Panel */}\n          <div className=\"lg:col-span-3 space-y-6\">\n            {result && (\n              <>\n                {/* Key Metrics */}\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3 sm:gap-4\">\n                  <StatCard\n                    title=\"Total Area\"\n                    value={`${totalArea.toLocaleString()} ft²`}\n                    icon={Building}\n                  />\n                  <StatCard\n                    title=\"Cost per sq ft\"\n                    value={`$${result.all_in.min_psf} - $${result.all_in.max_psf}`}\n                    icon={DollarSign}\n                  />\n                  <StatCard\n                    title=\"Budget Range\"\n                    value={`${formatCurrency(result.total_cost.low)} - ${formatCurrency(result.total_cost.high)}`}\n                    icon={TrendingUp}\n                  />\n                  <StatCard\n                    title=\"Minimum Budget\"\n                    value={formatCurrency(result.total_cost.proposed)}\n                    icon={Calculator}\n                    trend=\"neutral\"\n                  />\n                </div>\n\n                {/* Discipline Selection & Budget Breakdown */}\n                <Card>\n                  <CardHeader>\n                    <div className=\"flex justify-between items-start\">\n                      <div>\n                        <CardTitle className=\"flex items-center gap-2\">\n                          <PieChart className=\"h-5 w-5\" />\n                          Discipline Selection & Budget Breakdown\n                        </CardTitle>\n                        <CardDescription className=\"mt-1\">\n                          Select disciplines and view detailed budget allocation\n                        </CardDescription>\n                      </div>\n                      {selectedDisciplines.size > 0 && (\n                        <div className=\"text-right\">\n                          <div className=\"text-sm text-gray-600\">Selected Budget</div>\n                          <div className=\"text-lg font-bold text-scientific-blue\">\n                            {formatCurrency(getSelectedBudgetTotal())}\n                          </div>\n                          <div className=\"text-xs text-gray-500\">\n                            {selectedDisciplines.size} discipline{selectedDisciplines.size !== 1 ? 's' : ''} selected\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div>\n                        <Table>\n                          <TableHeader>\n                            <TableRow>\n                              <TableHead className=\"w-8\"></TableHead>\n                              <TableHead>Discipline</TableHead>\n                              <TableHead className=\"text-right\">Budget</TableHead>\n                              <TableHead className=\"text-right\">Share</TableHead>\n                              <TableHead className=\"w-8\"></TableHead>\n                            </TableRow>\n                          </TableHeader>\n                          <TableBody>\n                            {/* Architecture */}\n                            <TableRow className={`cursor-pointer hover:bg-gray-50 transition-colors ${\n                              selectedDisciplines.has('Architecture') ? 'bg-blue-50 border-l-4 border-l-scientific-blue' : ''\n                            }`}>\n                              <TableCell className=\"w-8\">\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"ghost\"\n                                  className=\"p-1 h-6 w-6\"\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    toggleDisciplineSelection('Architecture');\n                                  }}\n                                >\n                                  {selectedDisciplines.has('Architecture') ? '✓' : '+'}\n                                </Button>\n                              </TableCell>\n                              <TableCell \n                                className=\"font-medium cursor-pointer\" \n                                onClick={() => toggleTableRow('architecture')}\n                              >\n                                Architecture\n                                {selectedDisciplines.has('Architecture') && (\n                                  <Badge variant=\"secondary\" className=\"ml-2 text-xs\">Selected</Badge>\n                                )}\n                              </TableCell>\n                              <TableCell className=\"text-right\">{formatCurrency(result.architecture_budget)}</TableCell>\n                              <TableCell className=\"text-right\">{formatPercent(result.design_shares.Architecture || 0)}</TableCell>\n                              <TableCell className=\"text-center cursor-pointer\" onClick={() => toggleTableRow('architecture')}>\n                                {expandedTableRows.has('architecture') ? \n                                  <ChevronUp className=\"h-4 w-4\" /> : \n                                  <ChevronDown className=\"h-4 w-4\" />\n                                }\n                              </TableCell>\n                            </TableRow>\n                            {expandedTableRows.has('architecture') && (\n                              <TableRow className=\"bg-gray-50\">\n                                <TableCell colSpan={5} className=\"py-3\">\n                                  <div className=\"space-y-2\">\n                                    <div className=\"flex justify-between items-center text-sm\">\n                                      <span className=\"text-gray-600\">New Construction ({formatPercent(result.construction_ratios.new_construction)})</span>\n                                      <span className=\"font-medium\">{formatCurrency(result.discipline_breakdown.architecture.new_construction)}</span>\n                                    </div>\n                                    <div className=\"flex justify-between items-center text-sm\">\n                                      <span className=\"text-gray-600\">Existing Remodel ({formatPercent(result.construction_ratios.existing_remodel)})</span>\n                                      <span className=\"font-medium\">{formatCurrency(result.discipline_breakdown.architecture.existing_remodel)}</span>\n                                    </div>\n                                  </div>\n                                </TableCell>\n                              </TableRow>\n                            )}\n\n                            {/* Engineering Disciplines */}\n                            {Object.entries(result.engineering_budgets)\n                              .filter(([key]) => key !== 'sum' && key !== 'Architecture')\n                              .map(([discipline, budget]) => {\n                                const disciplineKey = discipline.toLowerCase().replace(/[^a-z0-9]/g, '_');\n                                const breakdown = result.discipline_breakdown[disciplineKey];\n                                const rowId = `eng_${disciplineKey}`;\n                                return (\n                                  <React.Fragment key={discipline}>\n                                    <TableRow className={`cursor-pointer hover:bg-gray-50 transition-colors ${\n                                      selectedDisciplines.has(discipline) ? 'bg-blue-50 border-l-4 border-l-scientific-blue' : ''\n                                    }`}>\n                                      <TableCell className=\"w-8\">\n                                        <Button\n                                          size=\"sm\"\n                                          variant=\"ghost\"\n                                          className=\"p-1 h-6 w-6\"\n                                          onClick={(e) => {\n                                            e.stopPropagation();\n                                            toggleDisciplineSelection(discipline);\n                                          }}\n                                        >\n                                          {selectedDisciplines.has(discipline) ? '\\u2713' : '+'}\n                                        </Button>\n                                      </TableCell>\n                                      <TableCell \n                                        className=\"cursor-pointer\" \n                                        onClick={() => toggleTableRow(rowId)}\n                                      >\n                                        {discipline}\n                                        {selectedDisciplines.has(discipline) && (\n                                          <Badge variant=\"secondary\" className=\"ml-2 text-xs\">Selected</Badge>\n                                        )}\n                                      </TableCell>\n                                      <TableCell className=\"text-right\">{formatCurrency(budget)}</TableCell>\n                                      <TableCell className=\"text-right\">{formatPercent(result.design_shares[discipline] || 0)}</TableCell>\n                                      <TableCell className=\"text-center cursor-pointer\" onClick={() => toggleTableRow(rowId)}>\n                                        {expandedTableRows.has(rowId) ? \n                                          <ChevronUp className=\"h-4 w-4\" /> : \n                                          <ChevronDown className=\"h-4 w-4\" />\n                                        }\n                                      </TableCell>\n                                    </TableRow>\n                                    {expandedTableRows.has(rowId) && breakdown && (\n                                      <TableRow className=\"bg-gray-50\">\n                                        <TableCell colSpan={5} className=\"py-3\">\n                                          <div className=\"space-y-2\">\n                                            <div className=\"flex justify-between items-center text-sm\">\n                                              <span className=\"text-gray-600\">New Construction ({formatPercent(result.construction_ratios.new_construction)})</span>\n                                              <span className=\"font-medium\">{formatCurrency(breakdown.new_construction)}</span>\n                                            </div>\n                                            <div className=\"flex justify-between items-center text-sm\">\n                                              <span className=\"text-gray-600\">Existing Remodel ({formatPercent(result.construction_ratios.existing_remodel)}) - 50% rate</span>\n                                              <span className=\"font-medium\">{formatCurrency(breakdown.existing_remodel)}</span>\n                                            </div>\n                                          </div>\n                                        </TableCell>\n                                      </TableRow>\n                                    )}\n                                  </React.Fragment>\n                                );\n                              })}\n\n                            {/* Interior */}\n                            <TableRow className={`cursor-pointer hover:bg-gray-50 transition-colors ${\n                              selectedDisciplines.has('Interior') ? 'bg-blue-50 border-l-4 border-l-scientific-blue' : ''\n                            }`}>\n                              <TableCell className=\"w-8\">\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"ghost\"\n                                  className=\"p-1 h-6 w-6\"\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    toggleDisciplineSelection('Interior');\n                                  }}\n                                >\n                                  {selectedDisciplines.has('Interior') ? '\\u2713' : '+'}\n                                </Button>\n                              </TableCell>\n                              <TableCell \n                                className=\"font-medium cursor-pointer\" \n                                onClick={() => toggleTableRow('interior')}\n                              >\n                                Interior\n                                {selectedDisciplines.has('Interior') && (\n                                  <Badge variant=\"secondary\" className=\"ml-2 text-xs\">Selected</Badge>\n                                )}\n                              </TableCell>\n                              <TableCell className=\"text-right\">{formatCurrency(result.minimum_budgets.interior)}</TableCell>\n                              <TableCell className=\"text-right\">{formatPercent(result.design_shares.Interior || 0)}</TableCell>\n                              <TableCell className=\"text-center cursor-pointer\" onClick={() => toggleTableRow('interior')}>\n                                {expandedTableRows.has('interior') ? \n                                  <ChevronUp className=\"h-4 w-4\" /> : \n                                  <ChevronDown className=\"h-4 w-4\" />\n                                }\n                              </TableCell>\n                            </TableRow>\n                            {expandedTableRows.has('interior') && (\n                              <TableRow className=\"bg-gray-50\">\n                                <TableCell colSpan={5} className=\"py-3\">\n                                  <div className=\"space-y-2\">\n                                    <div className=\"flex justify-between items-center text-sm\">\n                                      <span className=\"text-gray-600\">New Construction ({formatPercent(result.construction_ratios.new_construction)})</span>\n                                      <span className=\"font-medium\">{formatCurrency(result.discipline_breakdown.interior.new_construction)}</span>\n                                    </div>\n                                    <div className=\"flex justify-between items-center text-sm\">\n                                      <span className=\"text-gray-600\">Existing Remodel ({formatPercent(result.construction_ratios.existing_remodel)})</span>\n                                      <span className=\"font-medium\">{formatCurrency(result.discipline_breakdown.interior.existing_remodel)}</span>\n                                    </div>\n                                  </div>\n                                </TableCell>\n                              </TableRow>\n                            )}\n\n                            {/* Landscape */}\n                            <TableRow className={`cursor-pointer hover:bg-gray-50 transition-colors ${\n                              selectedDisciplines.has('Landscape') ? 'bg-blue-50 border-l-4 border-l-scientific-blue' : ''\n                            }`}>\n                              <TableCell className=\"w-8\">\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"ghost\"\n                                  className=\"p-1 h-6 w-6\"\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    toggleDisciplineSelection('Landscape');\n                                  }}\n                                >\n                                  {selectedDisciplines.has('Landscape') ? '\\u2713' : '+'}\n                                </Button>\n                              </TableCell>\n                              <TableCell \n                                className=\"font-medium cursor-pointer\" \n                                onClick={() => toggleTableRow('landscape')}\n                              >\n                                Landscape\n                                {selectedDisciplines.has('Landscape') && (\n                                  <Badge variant=\"secondary\" className=\"ml-2 text-xs\">Selected</Badge>\n                                )}\n                              </TableCell>\n                              <TableCell className=\"text-right\">{formatCurrency(result.minimum_budgets.landscape)}</TableCell>\n                              <TableCell className=\"text-right\">{formatPercent(result.design_shares.Landscape || 0)}</TableCell>\n                              <TableCell className=\"text-center cursor-pointer\" onClick={() => toggleTableRow('landscape')}>\n                                {expandedTableRows.has('landscape') ? \n                                  <ChevronUp className=\"h-4 w-4\" /> : \n                                  <ChevronDown className=\"h-4 w-4\" />\n                                }\n                              </TableCell>\n                            </TableRow>\n                            {expandedTableRows.has('landscape') && (\n                              <TableRow className=\"bg-gray-50\">\n                                <TableCell colSpan={5} className=\"py-3\">\n                                  <div className=\"space-y-2\">\n                                    <div className=\"flex justify-between items-center text-sm\">\n                                      <span className=\"text-gray-600\">New Construction ({formatPercent(result.construction_ratios.new_construction)})</span>\n                                      <span className=\"font-medium\">{formatCurrency(result.discipline_breakdown.landscape.new_construction)}</span>\n                                    </div>\n                                    <div className=\"flex justify-between items-center text-sm\">\n                                      <span className=\"text-gray-600\">Existing Remodel ({formatPercent(result.construction_ratios.existing_remodel)})</span>\n                                      <span className=\"font-medium\">{formatCurrency(result.discipline_breakdown.landscape.existing_remodel)}</span>\n                                    </div>\n                                  </div>\n                                </TableCell>\n                              </TableRow>\n                            )}\n\n                            <TableRow className=\"border-t-2 font-semibold\">\n                              <TableCell>Working Budget</TableCell>\n                              <TableCell className=\"text-right\">{formatCurrency(result.working_budget)}</TableCell>\n                              <TableCell className=\"text-right\">100.0%</TableCell>\n                              <TableCell></TableCell>\n                            </TableRow>\n                          </TableBody>\n                        </Table>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Notes & Warnings */}\n                {result.notes.length > 0 && (\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <AlertTriangle className=\"h-5 w-5 text-amber-500\" />\n                        Notes & Warnings\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      {result.notes.map((note, index) => (\n                        <Alert key={index} className=\"mb-2\">\n                          <AlertTriangle className=\"h-4 w-4\" />\n                          <AlertDescription>{note}</AlertDescription>\n                        </Alert>\n                      ))}\n                    </CardContent>\n                  </Card>\n                )}\n              </>\n            )}\n\n            {calculateBudget.isError && (\n              <Card>\n                <CardContent className=\"pt-6\">\n                  <Alert>\n                    <AlertTriangle className=\"h-4 w-4\" />\n                    <AlertDescription>\n                      Error calculating budget. Please check your inputs and try again.\n                    </AlertDescription>\n                  </Alert>\n                </CardContent>\n              </Card>\n            )}\n\n            {!result && !calculateBudget.isPending && (\n              <>\n                {/* Show Total Area even before calculation */}\n                <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n                  <StatCard\n                    title=\"Total Area\"\n                    value={`${totalArea.toLocaleString()} ft²`}\n                    icon={Building}\n                  />\n                </div>\n                \n                <Card>\n                  <CardContent className=\"pt-6 text-center\">\n                    <Calculator className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Ready to Calculate</h3>\n                    <p className=\"text-gray-500\">\n                      Select a building type and tier to start calculating your project budget.\n                    </p>\n                  </CardContent>\n                </Card>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Footer */}\n      <footer className=\"bg-white border-t border-light-border mt-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"text-sm text-gray-600\">\n              Minimum Budget Calculator v1.0 - Real-time project budget analysis\n            </div>\n            <div className=\"text-xs text-gray-500\">\n              Calculations update automatically as you type\n            </div>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":35208},"shared/fee-matrix-calculations.ts":{"content":"import type { \n  BudgetCalculationResult, \n  FeeMatrixInput, \n  FeeMatrixResult,\n  DisciplineFee,\n  ScanningFee \n} from './schema';\n\n// Fee curve constants from the Excel sheet\nconst FEE_CURVE_CONSTANTS = {\n  a: 0.07498,\n  b: 0.007824,\n  c: -0.7495,\n};\n\n// Hourly factor constants\nconst HOURLY_FACTOR_CONSTANTS = {\n  a: 0.21767,\n  b: 11.21274,\n  c: -0.53816,\n  adjustment: -0.08,\n};\n\n// Scanning rates\nconst SCANNING_RATES = {\n  existing_building_scan: 1.2,\n  site_scan: 1.2,\n};\n\n// Discipline configuration: which are internal vs consultants\nconst DISCIPLINE_CONFIG = {\n  'Architecture': { is_internal: true, budget_key: 'shell' },\n  'Interior': { is_internal: true, budget_key: 'interior' },\n  'Landscape': { is_internal: true, budget_key: 'landscape' },\n  'Structural': { is_internal: false, budget_key: 'Structural' },\n  'Civil & Site': { is_internal: true, budget_key: 'Civil & Site' },\n  'Mechanical': { is_internal: false, budget_key: 'Mechanical' },\n  'Electrical': { is_internal: false, budget_key: 'Electrical' },\n  'Plumbing': { is_internal: true, budget_key: 'Plumbing' },\n  'Low-Voltage': { is_internal: false, budget_key: 'Low-Voltage' },\n};\n\n/**\n * Calculate fee percentage using the complexity-adjusted curve\n */\nfunction calculateFeePercentage(budget: number, complexityMultiplier: number): number {\n  const { a, b, c } = FEE_CURVE_CONSTANTS;\n  return (a + b * Math.pow(budget / 1_000_000, c)) * (1 + complexityMultiplier);\n}\n\n/**\n * Calculate hourly factor from total building area\n */\nfunction calculateHourlyFactor(totalBuildingArea: number): number {\n  const { a, b, c, adjustment } = HOURLY_FACTOR_CONSTANTS;\n  return a + b * Math.pow(totalBuildingArea, c) + adjustment;\n}\n\n/**\n * Calculate scanning fees\n */\nfunction calculateScanningFees(\n  budgetResult: BudgetCalculationResult,\n  discountRate: number,\n  averageBillableRate: number\n): ScanningFee[] {\n  const scanningFees: ScanningFee[] = [];\n  \n  const existingArea = budgetResult.inputs.existing_area_ft2;\n  const siteArea = budgetResult.inputs.site_area_m2 || 0;\n\n  // Existing Building Scan to BIM\n  if (existingArea > 0) {\n    const fee = SCANNING_RATES.existing_building_scan * existingArea;\n    const discountedFee = fee * (1 - discountRate);\n    scanningFees.push({\n      service: 'Existing Building Scan to BIM',\n      area: existingArea,\n      rate: SCANNING_RATES.existing_building_scan,\n      fee,\n      discounted_fee: discountedFee,\n      hours: discountedFee / averageBillableRate,\n    });\n  }\n\n  // Site Scan to BIM\n  if (siteArea > 0) {\n    const fee = SCANNING_RATES.site_scan * siteArea;\n    const discountedFee = fee * (1 - discountRate);\n    scanningFees.push({\n      service: 'Site Scan to BIM',\n      area: siteArea,\n      rate: SCANNING_RATES.site_scan,\n      fee,\n      discounted_fee: discountedFee,\n      hours: discountedFee / averageBillableRate,\n    });\n  }\n\n  return scanningFees;\n}\n\n/**\n * Get budget value for a discipline\n */\nfunction getDisciplineBudget(budgetResult: BudgetCalculationResult, discipline: string): number {\n  const config = DISCIPLINE_CONFIG[discipline as keyof typeof DISCIPLINE_CONFIG];\n  if (!config) return 0;\n\n  switch (config.budget_key) {\n    case 'shell':\n      return budgetResult.minimum_budgets.shell;\n    case 'interior':\n      return budgetResult.minimum_budgets.interior;\n    case 'landscape':\n      return budgetResult.minimum_budgets.landscape;\n    default:\n      // Engineering disciplines\n      return budgetResult.engineering_budgets[config.budget_key] || 0;\n  }\n}\n\n/**\n * Calculate discipline fees\n */\nfunction calculateDisciplineFees(\n  budgetResult: BudgetCalculationResult,\n  complexityMultiplier: number,\n  discountRate: number,\n  averageBillableRate: number\n): DisciplineFee[] {\n  const disciplineFees: DisciplineFee[] = [];\n  const totalBuildingArea = budgetResult.area.total_sf;\n\n  Object.keys(DISCIPLINE_CONFIG).forEach(discipline => {\n    const config = DISCIPLINE_CONFIG[discipline as keyof typeof DISCIPLINE_CONFIG];\n    const budget = getDisciplineBudget(budgetResult, discipline);\n    \n    if (budget <= 0) return;\n\n    const percentage = calculateFeePercentage(budget, complexityMultiplier);\n    const fee = percentage * budget;\n    const ratePsf = fee / totalBuildingArea;\n\n    let discountedFee: number | undefined;\n    let consultantFee: number | undefined;\n    let hours: number | undefined;\n\n    if (config.is_internal) {\n      discountedFee = fee * (1 - discountRate);\n      hours = discountedFee / averageBillableRate;\n    } else {\n      consultantFee = fee;\n    }\n\n    disciplineFees.push({\n      discipline,\n      budget,\n      percentage,\n      fee,\n      discounted_fee: discountedFee,\n      consultant_fee: consultantFee,\n      rate_psf: ratePsf,\n      hours,\n      is_internal: config.is_internal,\n    });\n  });\n\n  return disciplineFees;\n}\n\n/**\n * Main fee matrix calculation function\n */\nexport function calculateFeeMatrix(input: FeeMatrixInput): FeeMatrixResult {\n  const { budget_result, complexity_multiplier, discount_rate, average_billable_rate } = input;\n  \n  // Calculate scanning fees\n  const scanningFees = calculateScanningFees(budget_result, discount_rate, average_billable_rate);\n  \n  // Calculate discipline fees\n  const disciplineFees = calculateDisciplineFees(\n    budget_result, \n    complexity_multiplier, \n    discount_rate, \n    average_billable_rate\n  );\n\n  // Calculate totals\n  const scanningTotal = scanningFees.reduce((sum, fee) => sum + fee.fee, 0);\n  const disciplineTotal = disciplineFees.reduce((sum, fee) => sum + fee.fee, 0);\n  const marketFee = scanningTotal + disciplineTotal;\n\n  const consultantTotal = disciplineFees.reduce((sum, fee) => sum + (fee.consultant_fee || 0), 0);\n  const scanningDiscountedTotal = scanningFees.reduce((sum, fee) => sum + fee.discounted_fee, 0);\n  const disciplineDiscountedTotal = disciplineFees.reduce((sum, fee) => sum + (fee.discounted_fee || 0), 0);\n  const discountedTotal = scanningDiscountedTotal + disciplineDiscountedTotal;\n\n  const overallPercentage = marketFee / budget_result.total_cost.proposed;\n  const ratePerFt2 = marketFee / budget_result.area.total_sf;\n\n  const scanningHours = scanningFees.reduce((sum, fee) => sum + (fee.hours || 0), 0);\n  const disciplineHours = disciplineFees.reduce((sum, fee) => sum + (fee.hours || 0), 0);\n  const totalHours = scanningHours + disciplineHours;\n\n  // Calculate hourly factor and raw design hours\n  const hfValue = calculateHourlyFactor(budget_result.area.total_sf);\n  const rawDesignHours = hfValue * budget_result.area.total_sf;\n\n  // Calculate cost base breakdown\n  const interiorDiscountedFee = disciplineFees.find(d => d.discipline === 'Interior')?.discounted_fee || 0;\n  const landscapeDiscountedFee = disciplineFees.find(d => d.discipline === 'Landscape')?.discounted_fee || 0;\n  const shellCostBase = discountedTotal - interiorDiscountedFee - landscapeDiscountedFee;\n\n  return {\n    inputs: input,\n    scanning_fees: scanningFees,\n    discipline_fees: disciplineFees,\n    totals: {\n      market_fee: Math.round(marketFee * 100) / 100,\n      consultant_total: Math.round(consultantTotal * 100) / 100,\n      discounted_total: Math.round(discountedTotal * 100) / 100,\n      overall_percentage: Math.round(overallPercentage * 10000) / 100, // Convert to percentage\n      rate_per_ft2: Math.round(ratePerFt2 * 100) / 100,\n      total_hours: Math.round(totalHours * 100) / 100,\n    },\n    hourly_factor: {\n      hf_value: Math.round(hfValue * 100000) / 100000,\n      raw_design_hours: Math.round(rawDesignHours * 100) / 100,\n      total_building_area: budget_result.area.total_sf,\n    },\n    cost_base: {\n      shell_cost_base: Math.round(shellCostBase * 100) / 100,\n      interior_cost_base: Math.round(interiorDiscountedFee * 100) / 100,\n      landscape_cost_base: Math.round(landscapeDiscountedFee * 100) / 100,\n    },\n  };\n}","size_bytes":7823},"client/src/pages/fee-matrix.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Progress } from '@/components/ui/progress';\nimport { Calculator, Building, DollarSign, Clock, TrendingUp, BarChart3, AlertTriangle } from 'lucide-react';\nimport { apiRequest } from '@/lib/queryClient';\nimport type { BudgetCalculationResult, FeeMatrixInput, FeeMatrixResult } from '@shared/schema';\n\ninterface FeeMatrixFormData {\n  complexity_multiplier: number;\n  discount_rate: number;\n  average_billable_rate: number;\n}\n\nfunction formatCurrency(amount: number): string {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  }).format(amount);\n}\n\nfunction formatPercent(value: number): string {\n  return new Intl.NumberFormat('en-US', {\n    style: 'percent',\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  }).format(value / 100);\n}\n\nfunction formatHours(hours: number): string {\n  return new Intl.NumberFormat('en-US', {\n    minimumFractionDigits: 1,\n    maximumFractionDigits: 1,\n  }).format(hours);\n}\n\nexport default function FeeMatrix() {\n  const [formData, setFormData] = useState<FeeMatrixFormData>({\n    complexity_multiplier: 0.3,\n    discount_rate: 0.15,\n    average_billable_rate: 172.17,\n  });\n\n  const [budgetResult, setBudgetResult] = useState<BudgetCalculationResult | null>(null);\n  const [result, setResult] = useState<FeeMatrixResult | null>(null);\n  const queryClient = useQueryClient();\n\n  // Calculate fee matrix mutation\n  const calculateFeeMatrix = useMutation<FeeMatrixResult, Error, FeeMatrixInput>({\n    mutationFn: async (input: FeeMatrixInput) => {\n      const response = await fetch('/api/calc/fee-matrix', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(input),\n      });\n      if (!response.ok) {\n        throw new Error('Failed to calculate fee matrix');\n      }\n      return response.json();\n    },\n    onSuccess: (data: FeeMatrixResult) => {\n      setResult(data);\n    },\n  });\n\n  // Load budget result from localStorage on component mount\n  useEffect(() => {\n    const savedBudgetResult = localStorage.getItem('budgetResult');\n    if (savedBudgetResult) {\n      try {\n        const parsedResult = JSON.parse(savedBudgetResult);\n        setBudgetResult(parsedResult);\n      } catch (error) {\n        console.error('Failed to parse saved budget result:', error);\n      }\n    }\n  }, []);\n\n  // Auto-calculate when form changes and save results\n  useEffect(() => {\n    if (budgetResult) {\n      const input: FeeMatrixInput = {\n        budget_result: budgetResult,\n        complexity_multiplier: formData.complexity_multiplier,\n        discount_rate: formData.discount_rate,\n        average_billable_rate: formData.average_billable_rate,\n      };\n      calculateFeeMatrix.mutate(input);\n    }\n  }, [formData, budgetResult]);\n\n  // Save fee matrix result to localStorage when calculated\n  useEffect(() => {\n    if (result) {\n      localStorage.setItem('feeMatrixResult', JSON.stringify(result));\n    }\n  }, [result]);\n\n  const handleInputChange = (field: keyof FeeMatrixFormData, value: number) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value,\n    }));\n  };\n\n  const StatCard = ({ title, value, subtitle, icon: Icon, variant = 'default' }: {\n    title: string;\n    value: string;\n    subtitle?: string;\n    icon: any;\n    variant?: 'default' | 'success' | 'warning';\n  }) => (\n    <Card className={`relative overflow-hidden ${\n      variant === 'success' ? 'border-green-200 bg-green-50' : \n      variant === 'warning' ? 'border-yellow-200 bg-yellow-50' : ''\n    }`}>\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <CardTitle className=\"text-sm font-medium text-gray-600\">{title}</CardTitle>\n        <Icon className=\"h-4 w-4 text-gray-400\" />\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-xl sm:text-2xl font-bold text-gray-900\">{value}</div>\n        {subtitle && (\n          <div className=\"text-xs text-gray-500 mt-1\">{subtitle}</div>\n        )}\n      </CardContent>\n    </Card>\n  );\n\n  return (\n    <div className=\"bg-gray-50 font-inter text-dark-slate min-h-screen\">\n      {/* Header */}\n      <header className=\"bg-white border-b border-light-border shadow-sm\">\n        <div className=\"max-w-7xl mx-auto px-3 sm:px-6 lg:px-8\">\n          <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between h-auto sm:h-16 py-3 sm:py-0\">\n            <div className=\"flex items-center space-x-3 mb-3 sm:mb-0\">\n              <div className=\"w-10 h-10 bg-scientific-blue rounded-lg flex items-center justify-center\">\n                <Calculator className=\"h-6 w-6 text-white\" />\n              </div>\n              <div>\n                <h1 className=\"text-lg sm:text-xl font-semibold text-dark-slate\">Fee Matrix Calculator</h1>\n                <p className=\"text-xs sm:text-sm text-gray-500\">Professional fee calculation & analysis</p>\n              </div>\n            </div>\n            <div className=\"flex items-center justify-center sm:justify-end space-x-2 sm:space-x-4\">\n              <Badge variant=\"outline\" className=\"px-2 sm:px-3 py-1 text-xs sm:text-sm\">\n                Live Calculation\n              </Badge>\n              {result && (\n                <Button\n                  onClick={() => {\n                    // Export fee matrix results as CSV\n                    const headers = ['Service/Discipline', 'Budget', 'Fee %', 'Market Fee', 'Internal Fee', 'Consultant Fee', 'Rate/SF', 'Hours'];\n                    const rows = [\n                      ...result.scanning_fees.map(fee => [\n                        fee.service,\n                        '-',\n                        '-',\n                        fee.fee.toFixed(2),\n                        fee.discounted_fee.toFixed(2),\n                        '-',\n                        `$${fee.rate.toFixed(2)}/unit`,\n                        fee.hours ? fee.hours.toFixed(1) : '-'\n                      ]),\n                      ...result.discipline_fees.map(fee => [\n                        fee.discipline,\n                        fee.budget.toFixed(2),\n                        (fee.percentage * 100).toFixed(2) + '%',\n                        fee.fee.toFixed(2),\n                        fee.discounted_fee ? fee.discounted_fee.toFixed(2) : '-',\n                        fee.consultant_fee ? fee.consultant_fee.toFixed(2) : '-',\n                        '$' + fee.rate_psf.toFixed(2),\n                        fee.hours ? fee.hours.toFixed(1) : '-'\n                      ])\n                    ];\n                    \n                    const csvContent = [headers, ...rows].map(row => row.join(',')).join('\\\\n');\n                    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n                    const link = document.createElement('a');\n                    const url = URL.createObjectURL(blob);\n                    link.setAttribute('href', url);\n                    link.setAttribute('download', 'fee-matrix-breakdown.csv');\n                    link.style.visibility = 'hidden';\n                    document.body.appendChild(link);\n                    link.click();\n                    document.body.removeChild(link);\n                  }}\n                  className=\"px-2 sm:px-4 py-2 text-xs sm:text-sm bg-scientific-blue hover:bg-blue-600\"\n                >\n                  <span className=\"hidden sm:inline\">Export CSV</span>\n                  <span className=\"sm:hidden\">Export</span>\n                </Button>\n              )}\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <div className=\"max-w-7xl mx-auto px-3 sm:px-6 lg:px-8 py-4 sm:py-8\">\n        {!budgetResult && (\n          <Alert className=\"mb-6\">\n            <AlertTriangle className=\"h-4 w-4\" />\n            <AlertDescription>\n              Please complete the Minimum Budget Calculator first to proceed with fee calculations.\n              <div className=\"flex flex-col sm:flex-row gap-2 mt-2\">\n                <Button \n                  variant=\"link\" \n                  className=\"p-0 h-auto text-left\"\n                  onClick={() => window.location.href = '/minimum-budget'}\n                >\n                  Go to Budget Calculator →\n                </Button>\n                <span className=\"text-gray-400 hidden sm:inline\">or</span>\n                <Button \n                  variant=\"link\" \n                  className=\"p-0 h-auto text-left\"\n                  onClick={() => {\n                    const sampleBudgetResult: BudgetCalculationResult = {\n                      inputs: { building_type: 'Sample Project', tier: 1, new_area_ft2: 3000, existing_area_ft2: 2000, site_area_m2: 500 },\n                      all_in: { min_psf: 200, max_psf: 300 },\n                      area: { total_sf: 5000 },\n                      total_cost: { low: 1000000, high: 1500000, proposed: 1250000 },\n                      shares: { shell: 0.65, interior: 0.25, landscape: 0.1 },\n                      minimum_budgets: { shell: 812500, interior: 312500, landscape: 125000 },\n                      design_shares: { 'Architecture': 0.45, 'Interior': 0.25, 'Landscape': 0.1 },\n                      engineering_budgets: { \n                        'Structural': 50000, \n                        'Civil & Site': 30000, \n                        'Mechanical': 40000, \n                        'Electrical': 35000, \n                        'Plumbing': 25000, \n                        'Low-Voltage': 20000,\n                        sum: 200000 \n                      },\n                      architecture_budget: 612500,\n                      working_budget: 1250000,\n                      construction_ratios: { new_construction: 0.6, existing_remodel: 0.4 },\n                      discipline_breakdown: {\n                        architecture: { total: 612500, new_construction: 367500, existing_remodel: 245000 },\n                        interior: { total: 312500, new_construction: 187500, existing_remodel: 125000 },\n                        landscape: { total: 125000, new_construction: 75000, existing_remodel: 50000 },\n                      },\n                      notes: []\n                    };\n                    setBudgetResult(sampleBudgetResult);\n                  }}\n                >\n                  Load Sample Data\n                </Button>\n              </div>\n            </AlertDescription>\n          </Alert>\n        )}\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-4 sm:gap-8\">\n          {/* Input Panel */}\n          <div className=\"lg:col-span-1\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Building className=\"h-5 w-5\" />\n                  Fee Parameters\n                </CardTitle>\n                <CardDescription>\n                  Adjust complexity and billing parameters\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"complexity\">Complexity Multiplier</Label>\n                  <Input\n                    id=\"complexity\"\n                    type=\"number\"\n                    step=\"0.1\"\n                    min=\"0\"\n                    max=\"2\"\n                    value={formData.complexity_multiplier}\n                    onChange={(e) => handleInputChange('complexity_multiplier', parseFloat(e.target.value) || 0)}\n                    className=\"text-right\"\n                  />\n                  <p className=\"text-xs text-gray-500\">Default: 0.3 (30%)</p>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"discount\">Discount Rate</Label>\n                  <Input\n                    id=\"discount\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    min=\"0\"\n                    max=\"1\"\n                    value={formData.discount_rate}\n                    onChange={(e) => handleInputChange('discount_rate', parseFloat(e.target.value) || 0)}\n                    className=\"text-right\"\n                  />\n                  <p className=\"text-xs text-gray-500\">Default: 0.15 (15%)</p>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"billable-rate\">Average Billable Rate ($/hr)</Label>\n                  <Input\n                    id=\"billable-rate\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    min=\"1\"\n                    value={formData.average_billable_rate}\n                    onChange={(e) => handleInputChange('average_billable_rate', parseFloat(e.target.value) || 0)}\n                    className=\"text-right\"\n                  />\n                  <p className=\"text-xs text-gray-500\">Default: $172.17/hr</p>\n                </div>\n\n                {calculateFeeMatrix.isPending && (\n                  <div className=\"flex items-center justify-center py-4\">\n                    <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-scientific-blue\"></div>\n                  </div>\n                )}\n\n                {budgetResult && (\n                  <div className=\"bg-green-50 border border-green-200 rounded-lg p-3\">\n                    <div className=\"text-sm font-medium text-green-800\">Budget Data Loaded</div>\n                    <div className=\"text-xs text-green-600 mt-1\">\n                      {budgetResult.inputs.building_type} | {budgetResult.area.total_sf.toLocaleString()} SF | {formatCurrency(budgetResult.total_cost.proposed)}\n                    </div>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"mt-1 w-full text-xs text-blue-600 hover:text-blue-800 hover:bg-blue-50\"\n                      onClick={() => window.location.href = '/minimum-budget'}\n                    >\n                      ← Update Budget\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      className=\"mt-2 w-full text-xs\"\n                      onClick={() => {\n                        localStorage.removeItem('budgetResult');\n                        setBudgetResult(null);\n                        setResult(null);\n                      }}\n                    >\n                      Clear & Start Over\n                    </Button>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Results Panel */}\n          <div className=\"lg:col-span-3 space-y-6\">\n            {result && (\n              <>\n                {/* Key Metrics */}\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3 sm:gap-4\">\n                  <StatCard\n                    title=\"Market Fee\"\n                    value={formatCurrency(result.totals.market_fee)}\n                    subtitle={`${formatPercent(result.totals.overall_percentage)}`}\n                    icon={DollarSign}\n                    variant=\"success\"\n                  />\n                  <StatCard\n                    title=\"Rate per SF\"\n                    value={`$${result.totals.rate_per_ft2.toFixed(2)}`}\n                    subtitle={`${result.hourly_factor.total_building_area.toLocaleString()} SF`}\n                    icon={Building}\n                  />\n                  <StatCard\n                    title=\"Total Hours\"\n                    value={formatHours(result.totals.total_hours)}\n                    subtitle={`${formatHours(result.hourly_factor.raw_design_hours)} raw hrs`}\n                    icon={Clock}\n                  />\n                  <StatCard\n                    title=\"Consultants\"\n                    value={formatCurrency(result.totals.consultant_total)}\n                    subtitle={`${formatCurrency(result.totals.discounted_total)} internal`}\n                    icon={TrendingUp}\n                  />\n                </div>\n\n                {/* Fee Breakdown Table */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <BarChart3 className=\"h-5 w-5\" />\n                      Fee Breakdown by Discipline\n                    </CardTitle>\n                    <CardDescription>\n                      Detailed fee allocation across all services and disciplines\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"overflow-x-auto\">\n                      <Table>\n                        <TableHeader>\n                          <TableRow>\n                            <TableHead>Service/Discipline</TableHead>\n                            <TableHead className=\"text-right\">Budget</TableHead>\n                            <TableHead className=\"text-right\">Fee %</TableHead>\n                            <TableHead className=\"text-right\">Market Fee</TableHead>\n                            <TableHead className=\"text-right\">Internal Fee</TableHead>\n                            <TableHead className=\"text-right\">Consultant Fee</TableHead>\n                            <TableHead className=\"text-right\">Rate/SF</TableHead>\n                            <TableHead className=\"text-right\">Hours</TableHead>\n                          </TableRow>\n                        </TableHeader>\n                        <TableBody>\n                          {/* Scanning Services */}\n                          {result.scanning_fees.map((fee, index) => (\n                            <TableRow key={`scan-${index}`} className=\"bg-blue-50\">\n                              <TableCell className=\"font-medium\">{fee.service}</TableCell>\n                              <TableCell className=\"text-right\">-</TableCell>\n                              <TableCell className=\"text-right\">-</TableCell>\n                              <TableCell className=\"text-right\">{formatCurrency(fee.fee)}</TableCell>\n                              <TableCell className=\"text-right\">{formatCurrency(fee.discounted_fee)}</TableCell>\n                              <TableCell className=\"text-right\">-</TableCell>\n                              <TableCell className=\"text-right\">${fee.rate.toFixed(2)}/unit</TableCell>\n                              <TableCell className=\"text-right\">{fee.hours ? formatHours(fee.hours) : '-'}</TableCell>\n                            </TableRow>\n                          ))}\n                          \n                          {/* Discipline Services */}\n                          {result.discipline_fees.map((fee, index) => (\n                            <TableRow key={`disc-${index}`} className={fee.is_internal ? '' : 'bg-yellow-50'}>\n                              <TableCell className=\"font-medium\">\n                                {fee.discipline}\n                                {!fee.is_internal && (\n                                  <Badge variant=\"secondary\" className=\"ml-2 text-xs\">External</Badge>\n                                )}\n                              </TableCell>\n                              <TableCell className=\"text-right\">{formatCurrency(fee.budget)}</TableCell>\n                              <TableCell className=\"text-right\">{formatPercent(fee.percentage)}</TableCell>\n                              <TableCell className=\"text-right\">{formatCurrency(fee.fee)}</TableCell>\n                              <TableCell className=\"text-right\">\n                                {fee.discounted_fee ? formatCurrency(fee.discounted_fee) : '-'}\n                              </TableCell>\n                              <TableCell className=\"text-right\">\n                                {fee.consultant_fee ? formatCurrency(fee.consultant_fee) : '-'}\n                              </TableCell>\n                              <TableCell className=\"text-right\">${fee.rate_psf.toFixed(2)}</TableCell>\n                              <TableCell className=\"text-right\">{fee.hours ? formatHours(fee.hours) : '-'}</TableCell>\n                            </TableRow>\n                          ))}\n                          \n                          {/* Totals Row */}\n                          <TableRow className=\"border-t-2 font-bold bg-gray-100\">\n                            <TableCell>Total</TableCell>\n                            <TableCell className=\"text-right\">-</TableCell>\n                            <TableCell className=\"text-right\">{formatPercent(result.totals.overall_percentage)}</TableCell>\n                            <TableCell className=\"text-right\">{formatCurrency(result.totals.market_fee)}</TableCell>\n                            <TableCell className=\"text-right\">{formatCurrency(result.totals.discounted_total)}</TableCell>\n                            <TableCell className=\"text-right\">{formatCurrency(result.totals.consultant_total)}</TableCell>\n                            <TableCell className=\"text-right\">${result.totals.rate_per_ft2.toFixed(2)}</TableCell>\n                            <TableCell className=\"text-right\">{formatHours(result.totals.total_hours)}</TableCell>\n                          </TableRow>\n                        </TableBody>\n                      </Table>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Cost Base & Hourly Factor */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"text-sm\">Cost Base Breakdown</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-sm text-gray-600\">Shell Cost Base:</span>\n                          <span className=\"font-medium\">{formatCurrency(result.cost_base.shell_cost_base)}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-sm text-gray-600\">Interior Cost Base:</span>\n                          <span className=\"font-medium\">{formatCurrency(result.cost_base.interior_cost_base)}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-sm text-gray-600\">Landscape Cost Base:</span>\n                          <span className=\"font-medium\">{formatCurrency(result.cost_base.landscape_cost_base)}</span>\n                        </div>\n                        <Separator />\n                        <div className=\"flex justify-between font-bold\">\n                          <span className=\"text-sm\">Total:</span>\n                          <span>{formatCurrency(result.totals.discounted_total)}</span>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"text-sm\">Hourly Factor Analysis</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-sm text-gray-600\">Hourly Factor:</span>\n                          <span className=\"font-medium\">{result.hourly_factor.hf_value.toFixed(5)} hr/SF</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-sm text-gray-600\">Building Area:</span>\n                          <span className=\"font-medium\">{result.hourly_factor.total_building_area.toLocaleString()} SF</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-sm text-gray-600\">Raw Design Hours:</span>\n                          <span className=\"font-medium\">{formatHours(result.hourly_factor.raw_design_hours)}</span>\n                        </div>\n                        <Separator />\n                        <div className=\"flex justify-between font-bold\">\n                          <span className=\"text-sm\">Fee-Based Hours:</span>\n                          <span>{formatHours(result.totals.total_hours)}</span>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":25399},"client/src/pages/project-dashboard.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Progress } from '@/components/ui/progress';\nimport { \n  Calculator, \n  Building, \n  DollarSign, \n  Clock, \n  TrendingUp, \n  BarChart3, \n  AlertTriangle, \n  FileText,\n  Download,\n  Edit,\n  CheckCircle2,\n  ArrowRight\n} from 'lucide-react';\nimport type { BudgetCalculationResult, FeeMatrixResult } from '@shared/schema';\n\nfunction formatCurrency(amount: number): string {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n  }).format(amount);\n}\n\nfunction formatPercent(value: number): string {\n  return new Intl.NumberFormat('en-US', {\n    style: 'percent',\n    minimumFractionDigits: 1,\n    maximumFractionDigits: 1,\n  }).format(value / 100);\n}\n\nfunction formatHours(hours: number): string {\n  return new Intl.NumberFormat('en-US', {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n  }).format(hours);\n}\n\nexport default function ProjectDashboard() {\n  const [budgetResult, setBudgetResult] = useState<BudgetCalculationResult | null>(null);\n  const [feeResult, setFeeResult] = useState<FeeMatrixResult | null>(null);\n  const [projectName, setProjectName] = useState<string>('');\n\n  useEffect(() => {\n    // Load saved data\n    const savedBudgetResult = localStorage.getItem('budgetResult');\n    const savedFeeResult = localStorage.getItem('feeMatrixResult');\n    const savedProjectName = localStorage.getItem('projectName') || 'Untitled Project';\n\n    if (savedBudgetResult) {\n      try {\n        setBudgetResult(JSON.parse(savedBudgetResult));\n      } catch (error) {\n        console.error('Failed to parse budget result:', error);\n      }\n    }\n\n    if (savedFeeResult) {\n      try {\n        setFeeResult(JSON.parse(savedFeeResult));\n      } catch (error) {\n        console.error('Failed to parse fee result:', error);\n      }\n    }\n\n    setProjectName(savedProjectName);\n  }, []);\n\n  const updateProjectName = (name: string) => {\n    setProjectName(name);\n    localStorage.setItem('projectName', name);\n  };\n\n  const exportCompleteReport = () => {\n    if (!budgetResult || !feeResult) return;\n\n    const reportData = {\n      project: {\n        name: projectName,\n        building_type: budgetResult.inputs.building_type,\n        tier: budgetResult.inputs.tier,\n        total_area: budgetResult.area.total_sf,\n        new_area: budgetResult.inputs.new_area_ft2,\n        existing_area: budgetResult.inputs.existing_area_ft2,\n        site_area: budgetResult.inputs.site_area_m2\n      },\n      budget_summary: {\n        total_construction_cost: budgetResult.total_cost.proposed,\n        shell_budget: budgetResult.minimum_budgets.shell,\n        interior_budget: budgetResult.minimum_budgets.interior,\n        landscape_budget: budgetResult.minimum_budgets.landscape,\n        architecture_budget: budgetResult.architecture_budget,\n        engineering_total: budgetResult.engineering_budgets.sum\n      },\n      fee_summary: {\n        market_fee: feeResult.totals.market_fee,\n        consultant_fees: feeResult.totals.consultant_total,\n        internal_fees: feeResult.totals.discounted_total,\n        overall_percentage: feeResult.totals.overall_percentage,\n        rate_per_sf: feeResult.totals.rate_per_ft2,\n        total_hours: feeResult.totals.total_hours\n      }\n    };\n\n    const jsonContent = JSON.stringify(reportData, null, 2);\n    const blob = new Blob([jsonContent], { type: 'application/json;charset=utf-8;' });\n    const link = document.createElement('a');\n    const url = URL.createObjectURL(blob);\n    link.setAttribute('href', url);\n    link.setAttribute('download', `${projectName.replace(/[^a-z0-9]/gi, '_')}_complete_report.json`);\n    link.style.visibility = 'hidden';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  const clearAllData = () => {\n    if (confirm('Are you sure you want to clear all project data? This action cannot be undone.')) {\n      localStorage.removeItem('budgetResult');\n      localStorage.removeItem('feeMatrixResult');\n      localStorage.removeItem('projectName');\n      setBudgetResult(null);\n      setFeeResult(null);\n      setProjectName('Untitled Project');\n    }\n  };\n\n  const completionPercentage = () => {\n    let completed = 0;\n    if (budgetResult) completed += 50;\n    if (feeResult) completed += 50;\n    return completed;\n  };\n\n  const StatCard = ({ title, value, subtitle, icon: Icon, variant = 'default', onClick }: {\n    title: string;\n    value: string;\n    subtitle?: string;\n    icon: any;\n    variant?: 'default' | 'success' | 'warning';\n    onClick?: () => void;\n  }) => (\n    <Card \n      className={`relative overflow-hidden cursor-pointer transition-all hover:shadow-md ${\n        variant === 'success' ? 'border-green-200 bg-green-50' : \n        variant === 'warning' ? 'border-yellow-200 bg-yellow-50' : ''\n      }`}\n      onClick={onClick}\n    >\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <CardTitle className=\"text-sm font-medium text-gray-600\">{title}</CardTitle>\n        <Icon className=\"h-4 w-4 text-gray-400\" />\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-xl sm:text-2xl font-bold text-gray-900\">{value}</div>\n        {subtitle && (\n          <div className=\"text-xs text-gray-500 mt-1\">{subtitle}</div>\n        )}\n        {onClick && (\n          <div className=\"text-xs text-blue-600 mt-1 flex items-center\">\n            View Details <ArrowRight className=\"h-3 w-3 ml-1\" />\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n\n  return (\n    <div className=\"bg-gray-50 font-inter text-dark-slate min-h-screen\">\n      {/* Header */}\n      <header className=\"bg-white border-b border-light-border shadow-sm\">\n        <div className=\"max-w-7xl mx-auto px-3 sm:px-6 lg:px-8\">\n          <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between h-auto sm:h-16 py-3 sm:py-0\">\n            <div className=\"flex items-center space-x-3 mb-3 sm:mb-0\">\n              <div className=\"w-10 h-10 bg-scientific-blue rounded-lg flex items-center justify-center\">\n                <BarChart3 className=\"h-6 w-6 text-white\" />\n              </div>\n              <div className=\"flex-1\">\n                <input\n                  type=\"text\"\n                  value={projectName}\n                  onChange={(e) => updateProjectName(e.target.value)}\n                  className=\"text-lg sm:text-xl font-semibold text-dark-slate bg-transparent border-none outline-none focus:bg-white focus:border focus:border-blue-300 focus:rounded px-2\"\n                  placeholder=\"Enter project name...\"\n                />\n                <p className=\"text-xs sm:text-sm text-gray-500\">Project Analysis Dashboard</p>\n              </div>\n            </div>\n            <div className=\"flex items-center justify-center sm:justify-end space-x-2 sm:space-x-4\">\n              <Badge variant=\"outline\" className=\"px-2 sm:px-3 py-1 text-xs sm:text-sm\">\n                {completionPercentage()}% Complete\n              </Badge>\n              {budgetResult && feeResult && (\n                <Button\n                  onClick={exportCompleteReport}\n                  className=\"px-2 sm:px-4 py-2 text-xs sm:text-sm bg-scientific-blue hover:bg-blue-600\"\n                >\n                  <Download className=\"h-4 w-4 mr-1\" />\n                  <span className=\"hidden sm:inline\">Export Report</span>\n                  <span className=\"sm:hidden\">Export</span>\n                </Button>\n              )}\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <div className=\"max-w-7xl mx-auto px-3 sm:px-6 lg:px-8 py-4 sm:py-8\">\n        {/* Progress Overview */}\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <CheckCircle2 className=\"h-5 w-5\" />\n              Project Progress\n            </CardTitle>\n            <CardDescription>\n              Complete both budget and fee calculations for full project analysis\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm font-medium\">Overall Progress</span>\n                <span className=\"text-sm text-gray-600\">{completionPercentage()}%</span>\n              </div>\n              <Progress value={completionPercentage()} className=\"h-2\" />\n              \n              <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4 mt-4\">\n                <div className={`flex items-center gap-3 p-3 rounded-lg border ${\n                  budgetResult ? 'bg-green-50 border-green-200' : 'bg-gray-50 border-gray-200'\n                }`}>\n                  <div className={`w-8 h-8 rounded-full flex items-center justify-center ${\n                    budgetResult ? 'bg-green-100 text-green-600' : 'bg-gray-100 text-gray-400'\n                  }`}>\n                    {budgetResult ? <CheckCircle2 className=\"h-4 w-4\" /> : <Building className=\"h-4 w-4\" />}\n                  </div>\n                  <div className=\"flex-1\">\n                    <div className=\"text-sm font-medium\">Budget Analysis</div>\n                    <div className=\"text-xs text-gray-600\">\n                      {budgetResult ? 'Completed' : 'Pending'}\n                    </div>\n                  </div>\n                  <Button\n                    size=\"sm\"\n                    variant={budgetResult ? \"outline\" : \"default\"}\n                    onClick={() => window.location.href = '/minimum-budget'}\n                  >\n                    {budgetResult ? <Edit className=\"h-3 w-3\" /> : 'Start'}\n                  </Button>\n                </div>\n\n                <div className={`flex items-center gap-3 p-3 rounded-lg border ${\n                  feeResult ? 'bg-green-50 border-green-200' : 'bg-gray-50 border-gray-200'\n                }`}>\n                  <div className={`w-8 h-8 rounded-full flex items-center justify-center ${\n                    feeResult ? 'bg-green-100 text-green-600' : 'bg-gray-100 text-gray-400'\n                  }`}>\n                    {feeResult ? <CheckCircle2 className=\"h-4 w-4\" /> : <Calculator className=\"h-4 w-4\" />}\n                  </div>\n                  <div className=\"flex-1\">\n                    <div className=\"text-sm font-medium\">Fee Calculation</div>\n                    <div className=\"text-xs text-gray-600\">\n                      {feeResult ? 'Completed' : budgetResult ? 'Ready' : 'Requires Budget'}\n                    </div>\n                  </div>\n                  <Button\n                    size=\"sm\"\n                    variant={feeResult ? \"outline\" : \"default\"}\n                    disabled={!budgetResult}\n                    onClick={() => window.location.href = '/fee-matrix'}\n                  >\n                    {feeResult ? <Edit className=\"h-3 w-3\" /> : 'Start'}\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {(!budgetResult || !feeResult) && (\n          <Alert className=\"mb-6\">\n            <AlertTriangle className=\"h-4 w-4\" />\n            <AlertDescription>\n              {!budgetResult && !feeResult && \"Start by completing the Budget Analysis to begin your project evaluation.\"}\n              {budgetResult && !feeResult && \"Great! Your budget is complete. Now calculate professional fees to finish the analysis.\"}\n            </AlertDescription>\n          </Alert>\n        )}\n\n        {budgetResult && feeResult && (\n          <>\n            {/* Key Metrics Overview */}\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3 sm:gap-4 mb-6\">\n              <StatCard\n                title=\"Total Project Cost\"\n                value={formatCurrency(budgetResult.total_cost.proposed)}\n                subtitle={`${budgetResult.area.total_sf.toLocaleString()} SF`}\n                icon={Building}\n                onClick={() => window.location.href = '/minimum-budget'}\n              />\n              <StatCard\n                title=\"Professional Fees\"\n                value={formatCurrency(feeResult.totals.market_fee)}\n                subtitle={`${formatPercent(feeResult.totals.overall_percentage)}`}\n                icon={DollarSign}\n                variant=\"success\"\n                onClick={() => window.location.href = '/fee-matrix'}\n              />\n              <StatCard\n                title=\"Design Hours\"\n                value={formatHours(feeResult.totals.total_hours)}\n                subtitle={`$${feeResult.inputs.average_billable_rate}/hr avg`}\n                icon={Clock}\n                onClick={() => window.location.href = '/fee-matrix'}\n              />\n              <StatCard\n                title=\"Rate per SF\"\n                value={`$${feeResult.totals.rate_per_ft2.toFixed(0)}`}\n                subtitle=\"Professional fees\"\n                icon={TrendingUp}\n                onClick={() => window.location.href = '/fee-matrix'}\n              />\n            </div>\n\n            {/* Detailed Breakdown */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6\">\n              {/* Budget Breakdown */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Building className=\"h-5 w-5\" />\n                    Construction Budget\n                  </CardTitle>\n                  <CardDescription>\n                    Breakdown by project component\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm text-gray-600\">Shell & Architecture</span>\n                      <span className=\"font-medium\">{formatCurrency(budgetResult.architecture_budget)}</span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm text-gray-600\">Interior Design</span>\n                      <span className=\"font-medium\">{formatCurrency(budgetResult.minimum_budgets.interior)}</span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm text-gray-600\">Landscape</span>\n                      <span className=\"font-medium\">{formatCurrency(budgetResult.minimum_budgets.landscape)}</span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm text-gray-600\">Engineering</span>\n                      <span className=\"font-medium\">{formatCurrency(budgetResult.engineering_budgets.sum)}</span>\n                    </div>\n                    <Separator />\n                    <div className=\"flex justify-between items-center font-bold\">\n                      <span>Total Construction</span>\n                      <span>{formatCurrency(budgetResult.total_cost.proposed)}</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Fee Breakdown */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Calculator className=\"h-5 w-5\" />\n                    Professional Fees\n                  </CardTitle>\n                  <CardDescription>\n                    Internal vs consultant breakdown\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm text-gray-600\">Internal Services</span>\n                      <span className=\"font-medium\">{formatCurrency(feeResult.totals.discounted_total)}</span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm text-gray-600\">External Consultants</span>\n                      <span className=\"font-medium\">{formatCurrency(feeResult.totals.consultant_total)}</span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm text-gray-600\">Total Hours</span>\n                      <span className=\"font-medium\">{formatHours(feeResult.totals.total_hours)} hrs</span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm text-gray-600\">Complexity Factor</span>\n                      <span className=\"font-medium\">{(feeResult.inputs.complexity_multiplier * 100).toFixed(0)}%</span>\n                    </div>\n                    <Separator />\n                    <div className=\"flex justify-between items-center font-bold\">\n                      <span>Total Fees</span>\n                      <span>{formatCurrency(feeResult.totals.market_fee)}</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Action Buttons */}\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Button\n                onClick={() => window.location.href = '/hourly-factor'}\n                variant=\"outline\"\n                className=\"flex items-center gap-2\"\n              >\n                <BarChart3 className=\"h-4 w-4\" />\n                Hourly Factor Calculator\n              </Button>\n              <Button\n                onClick={() => window.location.href = '/minimum-budget'}\n                variant=\"outline\"\n                className=\"flex items-center gap-2\"\n              >\n                <Edit className=\"h-4 w-4\" />\n                Modify Budget\n              </Button>\n              <Button\n                onClick={() => window.location.href = '/fee-matrix'}\n                variant=\"outline\"\n                className=\"flex items-center gap-2\"\n              >\n                <Edit className=\"h-4 w-4\" />\n                Adjust Fees\n              </Button>\n              <Button\n                onClick={clearAllData}\n                variant=\"destructive\"\n                className=\"flex items-center gap-2\"\n              >\n                <FileText className=\"h-4 w-4\" />\n                New Project\n              </Button>\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":19061},"server/services/feeMatrixV2.ts":{"content":"import { storage } from \"../storage\";\nimport type { \n  FeeMatrixV2Input, \n  FeeMatrixV2Result, \n  SectionII, \n  SectionIII, \n  SectionIV, \n  SectionV, \n  SectionVI \n} from \"@shared/schema\";\n\n// Phase months mapping from Excel workbook\nconst PHASE_MONTHS: Record<string, number | null> = {\n  'Kick-Off': 0,\n  'Discovery': 1,\n  'Creative - Conceptual': 1,\n  'Creative - Shematic': 3,\n  'Creative - Preliminary': 1,\n  'Technical - Shematic': 3,\n  'Technical - Preliminary': 1,\n  'Pre-Construction (Hourly Rate)': null,\n  'Construction Observation (Hourly Rate)': null,\n  'Total % Per Employees': null,\n};\n\nexport async function computeFeeMatrixV2(inputs: FeeMatrixV2Input): Promise<FeeMatrixV2Result> {\n  // Section II - Cost & Pricing Per Hour\n  const sectionII = await computeSectionII();\n  \n  // Section III - Project Hours & Leverage  \n  const sectionIII = await computeSectionIII(inputs);\n  \n  // Section IV - Project Hours Distribution\n  const sectionIV = await computeSectionIV(sectionIII);\n  \n  // Section V - Project Budget\n  const sectionV = await computeSectionV(sectionII, sectionIV);\n  \n  // Update weighted average rate in Section II\n  sectionII.weightedAverageRate = computeWeightedAverageRate(sectionII, sectionIV);\n  \n  // Section VI - Scenarios\n  const sectionVI = await computeSectionVI(inputs, sectionII, sectionIV, sectionV);\n\n  return {\n    inputs,\n    sectionII,\n    sectionIII,\n    sectionIV,\n    sectionV,\n    sectionVI,\n  };\n}\n\nasync function computeSectionII(): Promise<SectionII> {\n  const laborOverheadData = await storage.getAllLaborOverhead();\n  const markup = await storage.getFeeConfigValue('markup') ?? 1.0;\n  \n  const roles: Record<string, any> = {};\n  let totalPricePerHour = 0;\n  let roleCount = 0;\n\n  for (const item of laborOverheadData) {\n    const laborPerHour = parseFloat(item.laborAnnual) / 2080;\n    const overheadPerHour = parseFloat(item.overheadAnnual) / 2080;\n    const costPerHour = laborPerHour + overheadPerHour;\n    const pricePerHour = costPerHour * (1 + markup);\n\n    roles[item.role] = {\n      laborPerHour,\n      overheadPerHour,\n      costPerHour,\n      pricePerHour,\n    };\n\n    totalPricePerHour += pricePerHour;\n    roleCount++;\n  }\n\n  const simpleAverageRate = roleCount > 0 ? totalPricePerHour / roleCount : 0;\n\n  return {\n    roles,\n    simpleAverageRate,\n    weightedAverageRate: 0, // Will be computed after Section IV\n  };\n}\n\nasync function computeSectionIII(inputs: FeeMatrixV2Input): Promise<SectionIII> {\n  const totalHoursPlanned = inputs.totalHours ?? Math.round(inputs.totalAreaFt2 * inputs.hoursFactor);\n  \n  const hoursLeverageData = await storage.getAllHoursLeverage();\n  const phases: SectionIII['phases'] = [];\n  let totalMonths = 0;\n  let cumulativeHours = 0;\n\n  // Filter out rows that shouldn't be in phase calculations\n  const validPhases = hoursLeverageData.filter(phase => \n    phase.phase !== 'Total % Per Employees' && \n    phase.hoursPct !== null\n  );\n\n  for (let i = 0; i < validPhases.length; i++) {\n    const phase = validPhases[i];\n    const phaseName = phase.phase;\n    const months = PHASE_MONTHS[phaseName] ?? null;\n    const percent = parseFloat(phase.hoursPct || '0');\n    \n    let hours: number;\n    if (i === validPhases.length - 1) {\n      // Last phase gets remaining hours to ensure sum equals totalHoursPlanned\n      hours = totalHoursPlanned - cumulativeHours;\n    } else {\n      hours = Math.round(totalHoursPlanned * percent);\n      cumulativeHours += hours;\n    }\n\n    phases.push({\n      name: phaseName,\n      months,\n      percent,\n      hours,\n    });\n\n    if (months !== null) {\n      totalMonths += months;\n    }\n  }\n\n  return {\n    totalAreaFt2: inputs.totalAreaFt2,\n    hoursFactor: inputs.hoursFactor,\n    totalHoursPlanned,\n    phases,\n    totalMonths,\n  };\n}\n\nasync function computeSectionIV(sectionIII: SectionIII): Promise<SectionIV> {\n  const hoursLeverageData = await storage.getAllHoursLeverage();\n  \n  // Create lookup for phase weights\n  const phaseWeights: Record<string, any> = {};\n  for (const phase of hoursLeverageData) {\n    phaseWeights[phase.phase] = {\n      Admin: parseFloat(phase.adminPct || '0'),\n      Designer: parseFloat(phase.designer1Pct || '0'),\n      Designer2: parseFloat(phase.designer2Pct || '0'),\n      Architect: parseFloat(phase.architectPct || '0'),\n      Engineer: parseFloat(phase.engineerPct || '0'),\n      Principal: parseFloat(phase.principalPct || '0'),\n    };\n  }\n\n  const roles = ['Admin', 'Designer', 'Designer2', 'Architect', 'Engineer', 'Principal'];\n  const matrix: Record<string, Record<string, number>> = {};\n  const roleTotalsRounded: Record<string, number> = {};\n\n  // Initialize role totals\n  for (const role of roles) {\n    roleTotalsRounded[role] = 0;\n  }\n\n  // Calculate hours for each phase and role\n  for (const phase of sectionIII.phases) {\n    matrix[phase.name] = {};\n    const weights = phaseWeights[phase.name] || {};\n\n    for (const role of roles) {\n      const weight = weights[role] || 0;\n      const raw = phase.hours * weight;\n      \n      let hoursRolePhase: number;\n      if (role === 'Admin') {\n        hoursRolePhase = Math.round(raw); // matching Excel rounding for Admin\n      } else {\n        hoursRolePhase = Math.ceil(raw); // round up for staff\n      }\n\n      matrix[phase.name][role] = hoursRolePhase;\n      roleTotalsRounded[role] += hoursRolePhase;\n    }\n  }\n\n  const roundedGrandTotal = Object.values(roleTotalsRounded).reduce((sum, hours) => sum + hours, 0);\n\n  return {\n    matrix,\n    roleTotalsRounded,\n    roundedGrandTotal,\n    plannedGrandTotal: sectionIII.totalHoursPlanned,\n  };\n}\n\nasync function computeSectionV(sectionII: SectionII, sectionIV: SectionIV): Promise<SectionV> {\n  const roles = Object.keys(sectionIV.roleTotalsRounded);\n  const byRole: Record<string, any> = {};\n  \n  let totalHours = 0;\n  let totalPricing = 0;\n  let totalLabor = 0;\n  let totalOverhead = 0;\n  let totalCost = 0;\n  let totalProfit = 0;\n\n  for (const role of roles) {\n    const hours = sectionIV.roleTotalsRounded[role];\n    const roleData = sectionII.roles[role];\n    \n    if (!roleData) continue;\n\n    const pricing = hours * roleData.pricePerHour;\n    const labor = hours * roleData.laborPerHour;\n    const overhead = hours * roleData.overheadPerHour;\n    const cost = labor + overhead;\n    const profit = pricing - cost;\n    const margin = pricing > 0 ? profit / pricing : 0;\n\n    byRole[role] = {\n      hours,\n      pricePerHour: roleData.pricePerHour,\n      pricing,\n      labor,\n      overhead,\n      totalCost: cost,\n      profit,\n      margin,\n    };\n\n    totalHours += hours;\n    totalPricing += pricing;\n    totalLabor += labor;\n    totalOverhead += overhead;\n    totalCost += cost;\n    totalProfit += profit;\n  }\n\n  const totalMargin = totalPricing > 0 ? totalProfit / totalPricing : 0;\n\n  return {\n    byRole,\n    totals: {\n      hours: totalHours,\n      pricing: totalPricing,\n      labor: totalLabor,\n      overhead: totalOverhead,\n      totalCost,\n      profit: totalProfit,\n      margin: totalMargin,\n    },\n  };\n}\n\nasync function computeSectionVI(\n  inputs: FeeMatrixV2Input, \n  sectionII: SectionII, \n  sectionIV: SectionIV, \n  sectionV: SectionV\n): Promise<SectionVI> {\n  const hourlyRatesData = await storage.getAllHourlyRates();\n  const roles = Object.keys(sectionIV.roleTotalsRounded);\n  \n  // Create rate lookup\n  const louisAmyRates: Record<string, number> = {};\n  const marketRates: Record<string, number> = {};\n  \n  for (const item of hourlyRatesData) {\n    louisAmyRates[item.role] = parseFloat(item.louisAmyRate || '0') || sectionII.roles[item.role]?.pricePerHour || 0;\n    marketRates[item.role] = parseFloat(item.marketRate || '0') || louisAmyRates[item.role] || 0;\n  }\n\n  // Fill in missing rates with Section II data\n  for (const role of roles) {\n    if (!louisAmyRates[role]) {\n      louisAmyRates[role] = sectionII.roles[role]?.pricePerHour || 0;\n    }\n    if (!marketRates[role]) {\n      marketRates[role] = louisAmyRates[role];\n    }\n  }\n\n  const scenarios = [\n    {\n      name: 'LouisAmy Discounted',\n      rates: Object.fromEntries(roles.map(role => [\n        role, \n        louisAmyRates[role] * (1 - inputs.scenarioDiscountLouisAmy)\n      ])),\n    },\n    {\n      name: 'LouisAmy Full Rate',\n      rates: louisAmyRates,\n    },\n    {\n      name: 'Market Full Rate', \n      rates: marketRates,\n    },\n    {\n      name: 'Market Rate Discounted',\n      rates: Object.fromEntries(roles.map(role => [\n        role,\n        marketRates[role] * (1 - inputs.scenarioDiscountMarket)\n      ])),\n    },\n  ];\n\n  const projectBudget = sectionV.totals.pricing;\n\n  return {\n    scenarios: scenarios.map(scenario => {\n      const byRole: Record<string, number> = {};\n      let total = 0;\n\n      for (const role of roles) {\n        const fee = sectionIV.roleTotalsRounded[role] * scenario.rates[role];\n        byRole[role] = fee;\n        total += fee;\n      }\n\n      const pctOfProjectBudget = projectBudget > 0 ? total / projectBudget : 0;\n\n      return {\n        name: scenario.name,\n        byRole,\n        total,\n        pctOfProjectBudget,\n      };\n    }),\n  };\n}\n\nfunction computeWeightedAverageRate(sectionII: SectionII, sectionIV: SectionIV): number {\n  let totalWeightedRate = 0;\n  let totalHours = 0;\n\n  for (const [role, hours] of Object.entries(sectionIV.roleTotalsRounded)) {\n    const roleData = sectionII.roles[role];\n    if (roleData && hours > 0) {\n      totalWeightedRate += hours * roleData.pricePerHour;\n      totalHours += hours;\n    }\n  }\n\n  return totalHours > 0 ? totalWeightedRate / totalHours : 0;\n}","size_bytes":9530},"client/src/pages/fee-matrix-bottom-up.tsx":{"content":"import React, { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Calculator, Building, Clock, TrendingUp, DollarSign } from 'lucide-react';\nimport { apiRequest } from '@/lib/queryClient';\nimport type { FeeMatrixV2Input, FeeMatrixV2Result } from '@shared/schema';\n\ninterface FormData {\n  totalAreaFt2: number;\n  hoursFactor: number;\n  totalHours?: number;\n  complexityMultiplier: number;\n  scenarioDiscountLouisAmy: number;\n  scenarioDiscountMarket: number;\n}\n\nfunction formatCurrency(amount: number): string {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  }).format(amount);\n}\n\nfunction formatPercent(value: number, decimals: number = 1): string {\n  return new Intl.NumberFormat('en-US', {\n    style: 'percent',\n    minimumFractionDigits: decimals,\n    maximumFractionDigits: decimals,\n  }).format(value);\n}\n\nfunction formatNumber(value: number, decimals: number = 0): string {\n  return new Intl.NumberFormat('en-US', {\n    minimumFractionDigits: decimals,\n    maximumFractionDigits: decimals,\n  }).format(value);\n}\n\nexport default function FeeMatrixBottomUp() {\n  const [formData, setFormData] = useState<FormData>({\n    totalAreaFt2: 5000,\n    hoursFactor: 0.220,\n    complexityMultiplier: 0.3,\n    scenarioDiscountLouisAmy: 0.35,\n    scenarioDiscountMarket: 0.35,\n  });\n\n  const queryClient = useQueryClient();\n\n  // Fetch fee defaults\n  const { data: defaults } = useQuery({\n    queryKey: ['/api/fee-defaults'],\n  });\n\n  // Calculate fee matrix mutation\n  const calculateMutation = useMutation({\n    mutationFn: async (input: FeeMatrixV2Input) => {\n      const response = await apiRequest('POST', '/api/calc/fee-matrix/v2', input);\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/calc/fee-matrix/v2'] });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    calculateMutation.mutate(formData);\n  };\n\n  const handleInputChange = (field: keyof FormData, value: string | number) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: typeof value === 'string' ? parseFloat(value) || 0 : value,\n    }));\n  };\n\n  const result = calculateMutation.data as FeeMatrixV2Result | undefined;\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-6\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Fee Matrix - Bottom Up</h1>\n          <p className=\"text-gray-600\">Calculate project fees using hours leverage and bottom-up costing approach.</p>\n        </div>\n\n        {/* Input Form */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Calculator className=\"h-5 w-5\" />\n              Project Parameters\n            </CardTitle>\n            <CardDescription>\n              Enter project details to calculate comprehensive fee matrix\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div>\n                  <Label htmlFor=\"totalAreaFt2\">Total Area (sq ft)</Label>\n                  <Input\n                    id=\"totalAreaFt2\"\n                    type=\"number\"\n                    value={formData.totalAreaFt2}\n                    onChange={(e) => handleInputChange('totalAreaFt2', e.target.value)}\n                    required\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"hoursFactor\">Hours Factor</Label>\n                  <Input\n                    id=\"hoursFactor\"\n                    type=\"number\"\n                    step=\"0.001\"\n                    value={formData.hoursFactor}\n                    onChange={(e) => handleInputChange('hoursFactor', e.target.value)}\n                    required\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"totalHours\">Total Hours (override)</Label>\n                  <Input\n                    id=\"totalHours\"\n                    type=\"number\"\n                    value={formData.totalHours || ''}\n                    onChange={(e) => handleInputChange('totalHours', e.target.value)}\n                    placeholder=\"Auto-calculated\"\n                  />\n                </div>\n              </div>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div>\n                  <Label htmlFor=\"complexityMultiplier\">Complexity Multiplier</Label>\n                  <Input\n                    id=\"complexityMultiplier\"\n                    type=\"number\"\n                    step=\"0.1\"\n                    value={formData.complexityMultiplier}\n                    onChange={(e) => handleInputChange('complexityMultiplier', e.target.value)}\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"scenarioDiscountLouisAmy\">Louis Amy Discount (%)</Label>\n                  <Input\n                    id=\"scenarioDiscountLouisAmy\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={formData.scenarioDiscountLouisAmy * 100}\n                    onChange={(e) => handleInputChange('scenarioDiscountLouisAmy', parseFloat(e.target.value) / 100)}\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"scenarioDiscountMarket\">Market Discount (%)</Label>\n                  <Input\n                    id=\"scenarioDiscountMarket\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={formData.scenarioDiscountMarket * 100}\n                    onChange={(e) => handleInputChange('scenarioDiscountMarket', parseFloat(e.target.value) / 100)}\n                  />\n                </div>\n              </div>\n\n              <Button type=\"submit\" disabled={calculateMutation.isPending} className=\"w-full\">\n                {calculateMutation.isPending ? 'Calculating...' : 'Calculate Fee Matrix'}\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n\n        {calculateMutation.error && (\n          <Alert className=\"mb-6\">\n            <AlertDescription>\n              Error calculating fee matrix: {calculateMutation.error.message}\n            </AlertDescription>\n          </Alert>\n        )}\n\n        {result && result.sectionII && (\n          <div className=\"space-y-8\">\n            {/* Section II - Cost & Pricing Per Hour */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <DollarSign className=\"h-5 w-5\" />\n                  Section II - Cost & Pricing Per Hour\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Role</TableHead>\n                      <TableHead className=\"text-right\">Labour/hr</TableHead>\n                      <TableHead className=\"text-right\">Overhead/hr</TableHead>\n                      <TableHead className=\"text-right\">Cost/hr</TableHead>\n                      <TableHead className=\"text-right\">Price/hr</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {Object.entries(result.sectionII.roles).map(([role, data]) => (\n                      <TableRow key={role}>\n                        <TableCell className=\"font-medium\">{role}</TableCell>\n                        <TableCell className=\"text-right\">{formatCurrency(data.laborPerHour)}</TableCell>\n                        <TableCell className=\"text-right\">{formatCurrency(data.overheadPerHour)}</TableCell>\n                        <TableCell className=\"text-right\">{formatCurrency(data.costPerHour)}</TableCell>\n                        <TableCell className=\"text-right font-medium\">{formatCurrency(data.pricePerHour)}</TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n                <div className=\"mt-4 space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span>Simple Average Rate:</span>\n                    <span className=\"font-medium\">{formatCurrency(result.sectionII.simpleAverageRate)}</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span>Weighted Average Rate:</span>\n                    <span className=\"font-medium\">{formatCurrency(result.sectionII.weightedAverageRate)}</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Section III - Project Hours & Leverage */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Clock className=\"h-5 w-5\" />\n                  Section III - Project Hours & Leverage\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-3 gap-4 mb-4 text-sm\">\n                  <div>\n                    <span className=\"text-gray-600\">Sq Ft:</span>\n                    <div className=\"font-medium\">{formatNumber(result.sectionIII.totalAreaFt2)}</div>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-600\">Hours Factor:</span>\n                    <div className=\"font-medium\">{result.sectionIII.hoursFactor}</div>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-600\">Total Hours:</span>\n                    <div className=\"font-medium\">{formatNumber(result.sectionIII.totalHoursPlanned)}</div>\n                  </div>\n                </div>\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Phase</TableHead>\n                      <TableHead className=\"text-right\">Months</TableHead>\n                      <TableHead className=\"text-right\">% Allocation</TableHead>\n                      <TableHead className=\"text-right\">Hours per Stage</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {result.sectionIII.phases.map((phase) => (\n                      <TableRow key={phase.name}>\n                        <TableCell className=\"font-medium\">{phase.name}</TableCell>\n                        <TableCell className=\"text-right\">{phase.months ?? '-'}</TableCell>\n                        <TableCell className=\"text-right\">\n                          {phase.percent ? formatPercent(phase.percent) : '-'}\n                        </TableCell>\n                        <TableCell className=\"text-right font-medium\">{formatNumber(phase.hours)}</TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n                <div className=\"mt-4 text-sm\">\n                  <span className=\"text-gray-600\">Total Months: </span>\n                  <span className=\"font-medium\">{result.sectionIII.totalMonths}</span>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Section IV - Project Hours Distribution */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Building className=\"h-5 w-5\" />\n                  Section IV - Project Hours Distribution\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Phase</TableHead>\n                      {Object.keys(result.sectionIV.roleTotalsRounded).map(role => (\n                        <TableHead key={role} className=\"text-right\">{role}</TableHead>\n                      ))}\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {Object.entries(result.sectionIV.matrix).map(([phase, roleHours]) => (\n                      <TableRow key={phase}>\n                        <TableCell className=\"font-medium\">{phase}</TableCell>\n                        {Object.keys(result.sectionIV.roleTotalsRounded).map(role => (\n                          <TableCell key={role} className=\"text-right\">\n                            {formatNumber(roleHours[role] || 0)}\n                          </TableCell>\n                        ))}\n                      </TableRow>\n                    ))}\n                    <TableRow className=\"border-t-2 font-medium\">\n                      <TableCell>Totals</TableCell>\n                      {Object.entries(result.sectionIV.roleTotalsRounded).map(([role, hours]) => (\n                        <TableCell key={role} className=\"text-right\">{formatNumber(hours)}</TableCell>\n                      ))}\n                    </TableRow>\n                  </TableBody>\n                </Table>\n                <div className=\"mt-4 space-y-2 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span>Planned Grand Total:</span>\n                    <span className=\"font-medium\">{formatNumber(result.sectionIV.plannedGrandTotal)}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Rounded Grand Total:</span>\n                    <span className=\"font-medium\">{formatNumber(result.sectionIV.roundedGrandTotal)}</span>\n                  </div>\n                  {result.sectionIV.plannedGrandTotal !== result.sectionIV.roundedGrandTotal && (\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      Difference: {result.sectionIV.roundedGrandTotal - result.sectionIV.plannedGrandTotal}\n                    </Badge>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Section V - Project Budget */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <TrendingUp className=\"h-5 w-5\" />\n                  Section V - Project Budget\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Role</TableHead>\n                      <TableHead className=\"text-right\">Hours</TableHead>\n                      <TableHead className=\"text-right\">Price/hr</TableHead>\n                      <TableHead className=\"text-right\">Pricing</TableHead>\n                      <TableHead className=\"text-right\">Labour</TableHead>\n                      <TableHead className=\"text-right\">Overhead</TableHead>\n                      <TableHead className=\"text-right\">Total Cost</TableHead>\n                      <TableHead className=\"text-right\">Profit</TableHead>\n                      <TableHead className=\"text-right\">Margin</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {Object.entries(result.sectionV.byRole).map(([role, data]) => (\n                      <TableRow key={role}>\n                        <TableCell className=\"font-medium\">{role}</TableCell>\n                        <TableCell className=\"text-right\">{formatNumber(data.hours)}</TableCell>\n                        <TableCell className=\"text-right\">{formatCurrency(data.pricePerHour)}</TableCell>\n                        <TableCell className=\"text-right font-medium\">{formatCurrency(data.pricing)}</TableCell>\n                        <TableCell className=\"text-right\">{formatCurrency(data.labor)}</TableCell>\n                        <TableCell className=\"text-right\">{formatCurrency(data.overhead)}</TableCell>\n                        <TableCell className=\"text-right\">{formatCurrency(data.totalCost)}</TableCell>\n                        <TableCell className=\"text-right\">{formatCurrency(data.profit)}</TableCell>\n                        <TableCell className=\"text-right\">{formatPercent(data.margin)}</TableCell>\n                      </TableRow>\n                    ))}\n                    <TableRow className=\"border-t-2 font-medium\">\n                      <TableCell>Totals</TableCell>\n                      <TableCell className=\"text-right\">{formatNumber(result.sectionV.totals.hours)}</TableCell>\n                      <TableCell className=\"text-right\">-</TableCell>\n                      <TableCell className=\"text-right\">{formatCurrency(result.sectionV.totals.pricing)}</TableCell>\n                      <TableCell className=\"text-right\">{formatCurrency(result.sectionV.totals.labor)}</TableCell>\n                      <TableCell className=\"text-right\">{formatCurrency(result.sectionV.totals.overhead)}</TableCell>\n                      <TableCell className=\"text-right\">{formatCurrency(result.sectionV.totals.totalCost)}</TableCell>\n                      <TableCell className=\"text-right\">{formatCurrency(result.sectionV.totals.profit)}</TableCell>\n                      <TableCell className=\"text-right\">{formatPercent(result.sectionV.totals.margin)}</TableCell>\n                    </TableRow>\n                  </TableBody>\n                </Table>\n              </CardContent>\n            </Card>\n\n            {/* Section VI - Scenarios */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Calculator className=\"h-5 w-5\" />\n                  Section VI - Scenarios\n                </CardTitle>\n                <CardDescription>\n                  Fee comparison across different scenarios and rates\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Role</TableHead>\n                      {result.sectionVI.scenarios.map(scenario => (\n                        <TableHead key={scenario.name} className=\"text-right\">{scenario.name}</TableHead>\n                      ))}\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {Object.keys(result.sectionIV.roleTotalsRounded).map(role => (\n                      <TableRow key={role}>\n                        <TableCell className=\"font-medium\">{role}</TableCell>\n                        {result.sectionVI.scenarios.map(scenario => (\n                          <TableCell key={scenario.name} className=\"text-right\">\n                            {formatCurrency(scenario.byRole[role] || 0)}\n                          </TableCell>\n                        ))}\n                      </TableRow>\n                    ))}\n                    <TableRow className=\"border-t-2 font-medium\">\n                      <TableCell>Total</TableCell>\n                      {result.sectionVI.scenarios.map(scenario => (\n                        <TableCell key={scenario.name} className=\"text-right\">\n                          {formatCurrency(scenario.total)}\n                        </TableCell>\n                      ))}\n                    </TableRow>\n                    <TableRow className=\"text-sm text-gray-600\">\n                      <TableCell>% of Project Budget</TableCell>\n                      {result.sectionVI.scenarios.map(scenario => (\n                        <TableCell key={scenario.name} className=\"text-right\">\n                          {formatPercent(scenario.pctOfProjectBudget)}\n                        </TableCell>\n                      ))}\n                    </TableRow>\n                  </TableBody>\n                </Table>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":20671}}}